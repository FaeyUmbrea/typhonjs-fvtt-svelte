{"version":3,"file":"index.js","sources":["../../../node_modules/svelte/internal/index.mjs","../../../../../typhonjs-svelte/lib/_dist/store/reducer/index.js","../../../src/store/document/EmbeddedStoreManager.js","../../../src/store/document/TJSDocument.js","../../../src/store/document/TJSDocumentCollection.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.58.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { isObject, uuidv4, debounce, klona, normalizeString, isIterable } from '@typhonjs-svelte/lib/util';\nimport { writable, get } from 'svelte/store';\n\nclass DynReducerUtils {\n    /**\n     * Checks for array equality between two arrays of numbers.\n     *\n     * @param a - Array A\n     *\n     * @param b - Array B\n     *\n     * @returns Arrays are equal.\n     */\n    static arrayEquals(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (a === null || b === null) {\n            return false;\n        }\n        /* c8 ignore next */\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let cntr = a.length; --cntr >= 0;) {\n            /* c8 ignore next */\n            if (a[cntr] !== b[cntr]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Provides a solid string hashing algorithm.\n     *\n     * Sourced from: https://stackoverflow.com/a/52171480\n     *\n     * @param str - String to hash.\n     *\n     * @param seed - A seed value altering the hash.\n     *\n     * @returns Hash code.\n     */\n    static hashString(str, seed = 0) {\n        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n        for (let ch, i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i);\n            h1 = Math.imul(h1 ^ ch, 2654435761);\n            h2 = Math.imul(h2 ^ ch, 1597334677);\n        }\n        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n        return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n    }\n    /**\n     * Converts an unknown value for hashing purposes in {@link AdapterIndexer.calcHashUpdate}.\n     *\n     * Currently objects / Map w/ object keys is not supported. Potentially can include `object-hash` to handle this\n     * case, but it is not common to use objects as keys in Maps.\n     *\n     * @param value - An unknown value to convert to a number.\n     */\n    static hashUnknown(value) {\n        if (value === null || value === void 0) {\n            return 0;\n        }\n        let result = 0;\n        switch (typeof value) {\n            case 'boolean':\n                result = value ? 1 : 0;\n                break;\n            case 'bigint':\n                result = Number(BigInt.asIntN(64, value));\n                break;\n            case 'function':\n                result = this.hashString(value.name);\n                break;\n            case 'number':\n                result = Number.isFinite(value) ? value : 0;\n                break;\n            case 'object':\n                // TODO: consider hashing an object IE `object-hash` and convert to number.\n                break;\n            case 'string':\n                result = this.hashString(value);\n                break;\n            case 'symbol':\n                result = this.hashString(Symbol.keyFor(value));\n                break;\n        }\n        return result;\n    }\n    /**\n     * @param target -\n     *\n     * @param Prototype -\n     *\n     * @returns target constructor function has Prototype.\n     */\n    static hasPrototype(target, Prototype) {\n        /* c8 ignore next */\n        if (typeof target !== 'function') {\n            return false;\n        }\n        if (target === Prototype) {\n            return true;\n        }\n        // Walk parent prototype chain. Check for descriptor at each prototype level.\n        for (let proto = Object.getPrototypeOf(target); proto; proto = Object.getPrototypeOf(proto)) {\n            if (proto === Prototype) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Provides a utility method to determine if the given data is iterable / implements iterator protocol.\n     *\n     * @param data - Data to verify as iterable.\n     *\n     * @returns Is data iterable.\n     */\n    static isIterable(data) {\n        return data !== null && data !== void 0 && typeof data === 'object' &&\n            typeof data[Symbol.iterator] === 'function';\n    }\n}\n\n/**\n * Provides the `derived` API for all dynamic reducers.\n */\nclass AdapterDerived {\n    #hostData;\n    #DerivedReducerCtor;\n    #parentIndex;\n    #derived = new Map();\n    #destroyed = false;\n    /**\n     * @param hostData - Hosted data structure.\n     *\n     * @param parentIndex - Any associated parent index API.\n     *\n     * @param DerivedReducerCtor - The default derived reducer constructor function.\n     */\n    constructor(hostData, parentIndex, DerivedReducerCtor) {\n        this.#hostData = hostData;\n        this.#parentIndex = parentIndex;\n        this.#DerivedReducerCtor = DerivedReducerCtor;\n        Object.freeze(this);\n    }\n    /**\n     * Creates a new derived reducer.\n     *\n     * @param options - Options defining the new derived reducer.\n     *\n     * @returns Newly created derived reducer.\n     */\n    create(options) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.create error: this instance has been destroyed.`);\n        }\n        let name;\n        let rest = {};\n        let ctor;\n        const DerivedReducerCtor = this.#DerivedReducerCtor;\n        if (typeof options === 'string') {\n            name = options;\n            ctor = DerivedReducerCtor;\n        }\n        else if (typeof options === 'function' && DynReducerUtils.hasPrototype(options, DerivedReducerCtor)) {\n            ctor = options;\n        }\n        else if (typeof options === 'object' && options !== null) {\n            ({ name, ctor = DerivedReducerCtor, ...rest } = options);\n        }\n        else {\n            throw new TypeError(`AdapterDerived.create error: 'options' does not conform to allowed parameters.`);\n        }\n        if (!DynReducerUtils.hasPrototype(ctor, DerivedReducerCtor)) {\n            throw new TypeError(`AdapterDerived.create error: 'ctor' is not a '${DerivedReducerCtor?.name}'.`);\n        }\n        name = name ?? ctor?.name;\n        if (typeof name !== 'string') {\n            throw new TypeError(`AdapterDerived.create error: 'name' is not a string.`);\n        }\n        const derivedReducer = new ctor(this.#hostData, this.#parentIndex, rest);\n        this.#derived.set(name, derivedReducer);\n        return derivedReducer;\n    }\n    /**\n     * Removes all derived reducers and associated subscriptions.\n     */\n    clear() {\n        if (this.#destroyed) {\n            return;\n        }\n        for (const reducer of this.#derived.values()) {\n            reducer.destroy();\n        }\n        this.#derived.clear();\n    }\n    /**\n     * Deletes and destroys a derived reducer by name.\n     *\n     * @param name - Name of the derived reducer.\n     */\n    delete(name) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.delete error: this instance has been destroyed.`);\n        }\n        const reducer = this.#derived.get(name);\n        if (reducer) {\n            reducer.destroy();\n        }\n        return this.#derived.delete(name);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.clear();\n        this.#hostData = [null];\n        this.#parentIndex = null;\n        this.#destroyed = true;\n    }\n    /**\n     * Returns an existing derived reducer.\n     *\n     * @param name - Name of derived reducer.\n     */\n    get(name) {\n        if (this.#destroyed) {\n            throw Error(`AdapterDerived.get error: this instance has been destroyed.`);\n        }\n        return this.#derived.get(name);\n    }\n    /**\n     * Updates all managed derived reducer indexes.\n     *\n     * @param [force] - Force an update to subscribers.\n     */\n    update(force = false) {\n        if (this.#destroyed) {\n            return;\n        }\n        for (const reducer of this.#derived.values()) {\n            reducer.index.update(force);\n        }\n    }\n}\n\n/**\n * Provides the storage and sequencing of managed filters. Each filter added may be a bespoke function or a\n * {@link DynDataFilter} object containing an `id`, `filter`, and `weight` attributes; `filter` is the only required\n * attribute.\n *\n * The `id` attribute can be anything that creates a unique ID for the filter; recommended strings or numbers. This\n * allows filters to be removed by ID easily.\n *\n * The `weight` attribute is a number between 0 and 1 inclusive that allows filters to be added in a\n * predictable order which is especially handy if they are manipulated at runtime. A lower weighted filter always runs\n * before a higher weighted filter. For speed and efficiency always set the heavier / more inclusive filter with a\n * lower weight; an example of this is a keyword / name that will filter out many entries making any further filtering\n * faster. If no weight is specified the default of '1' is assigned and it is appended to the end of the filters list.\n *\n * This class forms the public API which is accessible from the `.filters` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.filters.add(...);\n * dynArray.filters.clear();\n * dynArray.filters.length;\n * dynArray.filters.remove(...);\n * dynArray.filters.removeBy(...);\n * dynArray.filters.removeById(...);\n * ```\n */\nclass AdapterFilters {\n    #filtersData;\n    #indexUpdate;\n    #mapUnsubscribe = new Map();\n    /**\n     * @param indexUpdate - update function for the indexer.\n     *\n     * @param filtersAdapter - Stores the filter function data.\n     */\n    constructor(indexUpdate, filtersAdapter) {\n        this.#indexUpdate = indexUpdate;\n        this.#filtersData = filtersAdapter;\n        Object.freeze(this);\n    }\n    /**\n     * @returns Returns the length of the filter data.\n     */\n    get length() { return this.#filtersData.filters.length; }\n    /**\n     * Provides an iterator for filters.\n     *\n     * @yields {DataFilter<T>}\n     */\n    *[Symbol.iterator]() {\n        if (this.#filtersData.filters.length === 0) {\n            return;\n        }\n        for (const entry of this.#filtersData.filters) {\n            yield { ...entry };\n        }\n    }\n    /**\n     * @param filters -\n     */\n    add(...filters) {\n        /**\n         * Tracks the number of filters added that have subscriber functionality.\n         */\n        let subscribeCount = 0;\n        for (const filter of filters) {\n            const filterType = typeof filter;\n            if (filterType !== 'function' && (filterType !== 'object' || filter === null)) {\n                throw new TypeError(`AdapterFilters error: 'filter' is not a function or object.`);\n            }\n            let data = void 0;\n            let subscribeFn = void 0;\n            if (filterType === 'function') {\n                data = {\n                    id: void 0,\n                    filter,\n                    weight: 1\n                };\n                subscribeFn = filter.subscribe;\n            }\n            else if (filterType === 'object') {\n                if ('filter' in filter) {\n                    if (typeof filter.filter !== 'function') {\n                        throw new TypeError(`AdapterFilters error: 'filter' attribute is not a function.`);\n                    }\n                    if (filter.weight !== void 0 && typeof filter.weight !== 'number' ||\n                        (filter.weight < 0 || filter.weight > 1)) {\n                        throw new TypeError(`AdapterFilters error: 'weight' attribute is not a number between '0 - 1' inclusive.`);\n                    }\n                    data = {\n                        id: filter.id !== void 0 ? filter.id : void 0,\n                        filter: filter.filter,\n                        weight: filter.weight || 1\n                    };\n                    subscribeFn = filter.filter.subscribe ?? filter.subscribe;\n                }\n                else {\n                    throw new TypeError(`AdapterFilters error: 'filter' attribute is not a function.`);\n                }\n            }\n            // Find the index to insert where data.weight is less than existing values weight.\n            const index = this.#filtersData.filters.findIndex((value) => {\n                return data.weight < value.weight;\n            });\n            // If an index was found insert at that location.\n            if (index >= 0) {\n                this.#filtersData.filters.splice(index, 0, data);\n            }\n            else // push to end of filters.\n             {\n                this.#filtersData.filters.push(data);\n            }\n            if (typeof subscribeFn === 'function') {\n                const unsubscribe = subscribeFn(this.#indexUpdate);\n                // Ensure that unsubscribe is a function.\n                if (typeof unsubscribe !== 'function') {\n                    throw new TypeError('AdapterFilters error: Filter has subscribe function, but no unsubscribe function is returned.');\n                }\n                // Ensure that the same filter is not subscribed to multiple times.\n                if (this.#mapUnsubscribe.has(data.filter)) {\n                    throw new Error('AdapterFilters error: Filter added already has an unsubscribe function registered.');\n                }\n                this.#mapUnsubscribe.set(data.filter, unsubscribe);\n                subscribeCount++;\n            }\n        }\n        // Filters with subscriber functionality are assumed to immediately invoke the `subscribe` callback. If the\n        // subscriber count is less than the amount of filters added then automatically trigger an index update manually.\n        if (subscribeCount < filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * Clears and removes all filters.\n     */\n    clear() {\n        this.#filtersData.filters.length = 0;\n        // Unsubscribe from all filters with subscription support.\n        for (const unsubscribe of this.#mapUnsubscribe.values()) {\n            unsubscribe();\n        }\n        this.#mapUnsubscribe.clear();\n        this.#indexUpdate();\n    }\n    /**\n     * @param filters -\n     */\n    remove(...filters) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        for (const data of filters) {\n            // Handle the case that the filter may either be a function or a filter entry / object.\n            const actualFilter = typeof data === 'function' ? data : data !== null && typeof data === 'object' ?\n                data.filter : void 0;\n            if (!actualFilter) {\n                continue;\n            }\n            for (let cntr = this.#filtersData.filters.length; --cntr >= 0;) {\n                if (this.#filtersData.filters[cntr].filter === actualFilter) {\n                    this.#filtersData.filters.splice(cntr, 1);\n                    // Invoke any unsubscribe function for given filter then remove from tracking.\n                    let unsubscribe = void 0;\n                    if (typeof (unsubscribe = this.#mapUnsubscribe.get(actualFilter)) === 'function') {\n                        unsubscribe();\n                        this.#mapUnsubscribe.delete(actualFilter);\n                    }\n                }\n            }\n        }\n        // Update the index a filter was removed.\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * Remove filters by the provided callback. The callback takes 3 parameters: `id`, `filter`, and `weight`.\n     * Any truthy value returned will remove that filter.\n     *\n     * @param callback - Callback function to evaluate each filter entry.\n     */\n    removeBy(callback) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(`AdapterFilters error: 'callback' is not a function.`);\n        }\n        this.#filtersData.filters = this.#filtersData.filters.filter((data) => {\n            const remove = callback.call(callback, { ...data });\n            if (remove) {\n                let unsubscribe;\n                if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function') {\n                    unsubscribe();\n                    this.#mapUnsubscribe.delete(data.filter);\n                }\n            }\n            // Reverse remove boolean to properly filter / remove this filter.\n            return !remove;\n        });\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * @param ids - Removes filters by ID.\n     */\n    removeById(...ids) {\n        const length = this.#filtersData.filters.length;\n        if (length === 0) {\n            return;\n        }\n        this.#filtersData.filters = this.#filtersData.filters.filter((data) => {\n            let remove = 0;\n            for (const id of ids) {\n                remove |= (data.id === id ? 1 : 0);\n            }\n            // If not keeping invoke any unsubscribe function for given filter then remove from tracking.\n            if (!!remove) {\n                let unsubscribe;\n                if (typeof (unsubscribe = this.#mapUnsubscribe.get(data.filter)) === 'function') {\n                    unsubscribe();\n                    this.#mapUnsubscribe.delete(data.filter);\n                }\n            }\n            return !remove; // Swap here to actually remove the item via array filter method.\n        });\n        if (length !== this.#filtersData.filters.length) {\n            this.#indexUpdate();\n        }\n    }\n}\n\n/**\n * Provides construction and management of indexed data when there are parent indexes or filter / sort functions\n * applied.\n */\nclass AdapterIndexer {\n    derivedAdapter;\n    filtersData;\n    hostData;\n    hostUpdate;\n    indexData;\n    sortData;\n    sortFn;\n    destroyed = false;\n    /**\n     * @param hostData - Hosted data structure.\n     *\n     * @param hostUpdate - Host update function invoked on index updates.\n     *\n     * @param [parentIndexer] - Any associated parent index API.\n     *\n     * @returns Indexer adapter instance.\n     */\n    constructor(hostData, hostUpdate, parentIndexer) {\n        this.hostData = hostData;\n        this.hostUpdate = hostUpdate;\n        this.indexData = { index: null, hash: null, reversed: false, parent: parentIndexer };\n    }\n    /**\n     * @returns Returns whether the index is active.\n     */\n    get active() {\n        return this.filtersData.filters.length > 0 || this.sortData.compareFn !== null ||\n            this.indexData.parent?.active === true;\n    }\n    /**\n     * @returns Returns length of reduced index.\n     */\n    get length() {\n        return this.indexData.index ? this.indexData.index.length : 0;\n    }\n    /* c8 ignore start */\n    /**\n     * @returns Returns reversed state.\n     */\n    get reversed() { return this.indexData.reversed; }\n    /* c8 ignore end */\n    /**\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) { this.indexData.reversed = reversed; }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Calculates a new hash value for the new index array if any. If the new index array is null then the hash value\n     * is set to null. Set calculated new hash value to the index adapter hash value.\n     *\n     * After hash generation compare old and new hash values and perform an update if they are different. If they are\n     * equal check for array equality between the old and new index array and perform an update if they are not equal.\n     *\n     * @param oldIndex - Old index array.\n     *\n     * @param oldHash - Old index hash value.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    calcHashUpdate(oldIndex, oldHash, force = false) {\n        // Use force if a boolean otherwise default to false.\n        const actualForce = typeof force === 'boolean' ? force : /* c8 ignore next */ false;\n        let newHash = null;\n        const newIndex = this.indexData.index;\n        if (newIndex) {\n            for (let cntr = newIndex.length; --cntr >= 0;) {\n                newHash ^= DynReducerUtils.hashUnknown(newIndex[cntr]) + 0x9e3779b9 + (newHash << 6) + (newHash >> 2);\n            }\n        }\n        this.indexData.hash = newHash;\n        if (actualForce || (oldHash === newHash ? !DynReducerUtils.arrayEquals(oldIndex, newIndex) : true)) {\n            this.hostUpdate();\n        }\n    }\n    /**\n     * Destroys all resources.\n     */\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        this.indexData.index = null;\n        this.indexData.hash = null;\n        this.indexData.reversed = null;\n        this.indexData.parent = null;\n        this.destroyed = true;\n    }\n    /**\n     * Store associated filter and sort data that are constructed after the indexer.\n     *\n     * @param filtersData - Associated AdapterFilters instance.\n     *\n     * @param sortData - Associated AdapterSort instance.\n     *\n     * @param derivedAdapter - Associated AdapterDerived instance.\n     */\n    initAdapters(filtersData, sortData, derivedAdapter) {\n        this.filtersData = filtersData;\n        this.sortData = sortData;\n        this.derivedAdapter = derivedAdapter;\n        this.sortFn = this.createSortFn();\n    }\n}\n\n/**\n * Provides the storage and sequencing of a managed sort function. The sort function set may be a bespoke function or a\n * {@link DynDataSort} object containing an `compare`, and `subscribe` attributes; `compare` is the only required\n * attribute.\n *\n * Note: You can set a compare function that also has a subscribe function attached as the `subscribe` attribute.\n * If a subscribe function is provided the sort function can notify any updates that may change sort order and this\n * triggers an index update.\n *\n * This class forms the public API which is accessible from the `.sort` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.sort.clear();\n * dynArray.sort.set(...);\n * ```\n */\nclass AdapterSort {\n    #sortData;\n    #indexUpdate;\n    #unsubscribe;\n    /**\n     * @param indexUpdate - Function to update indexer.\n     *\n     * @param sortData - Storage for compare function.\n     */\n    constructor(indexUpdate, sortData) {\n        this.#indexUpdate = indexUpdate;\n        this.#sortData = sortData;\n        Object.freeze(this);\n    }\n    /**\n     * Clears & removes any assigned sort function and triggers an index update.\n     */\n    clear() {\n        const oldCompareFn = this.#sortData.compareFn;\n        this.#sortData.compareFn = null;\n        if (typeof this.#unsubscribe === 'function') {\n            this.#unsubscribe();\n            this.#unsubscribe = void 0;\n        }\n        // Only update index if an old compare function is set.\n        if (typeof oldCompareFn === 'function') {\n            this.#indexUpdate();\n        }\n    }\n    /**\n     * @param data - A callback function that compares two values. Return > 0 to sort b before a;\n     * < 0 to sort a before b; or 0 to keep original order of a & b.\n     *\n     * Note: You can set a compare function that also has a subscribe function attached as the `subscribe` attribute.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#parameters\n     */\n    set(data) {\n        if (typeof this.#unsubscribe === 'function') {\n            this.#unsubscribe();\n            this.#unsubscribe = void 0;\n        }\n        let compareFn = void 0;\n        let subscribeFn = void 0;\n        switch (typeof data) {\n            case 'function':\n                compareFn = data;\n                subscribeFn = data.subscribe;\n                break;\n            case 'object':\n                // Early out if data is null / noop.\n                if (data === null) {\n                    break;\n                }\n                if (typeof data.compare !== 'function') {\n                    throw new TypeError(`AdapterSort error: 'compare' attribute is not a function.`);\n                }\n                compareFn = data.compare;\n                subscribeFn = data.compare.subscribe ?? data.subscribe;\n                break;\n        }\n        if (typeof compareFn === 'function') {\n            this.#sortData.compareFn = compareFn;\n        }\n        else {\n            const oldCompareFn = this.#sortData.compareFn;\n            this.#sortData.compareFn = null;\n            // Update index if the old compare function exists.\n            if (typeof oldCompareFn === 'function') {\n                this.#indexUpdate();\n            }\n            return;\n        }\n        if (typeof subscribeFn === 'function') {\n            this.#unsubscribe = subscribeFn(this.#indexUpdate);\n            // Ensure that unsubscribe is a function.\n            if (typeof this.#unsubscribe !== 'function') {\n                throw new Error(`AdapterSort error: sort has 'subscribe' function, but no 'unsubscribe' function is returned.`);\n            }\n        }\n        else {\n            // A sort function with subscriber functionality are assumed to immediately invoke the `subscribe` callback.\n            // Only manually update the index if there is no subscriber functionality.\n            this.#indexUpdate();\n        }\n    }\n}\n\n/**\n * Provides the public API for accessing the index API.\n *\n * This class forms the public API which is accessible from the `.index` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.index.active;\n * dynArray.index.hash;\n * dynArray.index.length;\n * dynArray.index.update(...);\n * ```\n */\nclass IndexerAPI {\n    #indexData;\n    /**\n     * Provides a getter to determine if the index is active.\n     */\n    active;\n    /**\n     * Provides length of reduced / indexed elements.\n     */\n    length;\n    /**\n     * Manually invoke an update of the index.\n     *\n     * @param force - Force update to any subscribers.\n     */\n    update;\n    constructor(adapterIndexer) {\n        this.#indexData = adapterIndexer.indexData;\n        this.update = adapterIndexer.update.bind(adapterIndexer);\n        // Defines getters on the public API to get the index hash, active state, and index length.\n        Object.defineProperties(this, {\n            active: { get: () => adapterIndexer.active },\n            length: { get: () => adapterIndexer.length }\n        });\n        Object.freeze(this);\n    }\n    /**\n     * - Current hash value of the index.\n     */\n    get hash() {\n        return this.#indexData.hash;\n    }\n    /**\n     * Provides an iterator over the index array.\n     *\n     * @yields {K}\n     */\n    *[Symbol.iterator]() {\n        const indexData = this.#indexData;\n        if (!indexData.index) {\n            return;\n        }\n        const reversed = indexData.reversed;\n        const length = indexData.index.length;\n        if (reversed) {\n            for (let cntr = length; --cntr >= 0;) {\n                yield indexData.index[cntr];\n            }\n        }\n        else {\n            for (let cntr = 0; cntr < length; cntr++) {\n                yield indexData.index[cntr];\n            }\n        }\n    }\n}\n\n/**\n * Provides the public API for derived reducers. There are several ways to create a derived reducer from utilizing the\n * default implementation or passing in a constructor function / class for a custom derived reducer.\n *\n * This class forms the public API which is accessible from the `.derived` getter in the main reducer implementation.\n * ```\n * const dynArray = new DynArrayReducer([...]);\n * dynArray.derived.clear();\n * dynArray.derived.create(...);\n * dynArray.derived.delete(...);\n * dynArray.derived.destroy();\n * dynArray.derived.get(...);\n * ```\n */\nclass DerivedAPI {\n    /**\n     * Removes all derived reducers and associated subscriptions.\n     */\n    clear;\n    /**\n     * @param options - Options for creating a reducer.\n     *\n     * @returns Newly created derived reducer.\n     */\n    create;\n    /**\n     * Deletes and destroys a derived reducer.\n     *\n     * @param name - Name of the derived reducer\n     */\n    delete;\n    /**\n     * Removes all derived reducers, associated subscriptions, and cleans up all resources.\n     */\n    destroy;\n    /**\n     * Returns an existing derived reducer.\n     *\n     * @param name - Name of derived reducer.\n     */\n    get;\n    constructor(adapterDerived) {\n        this.clear = adapterDerived.clear.bind(adapterDerived);\n        this.create = adapterDerived.create.bind(adapterDerived);\n        this.delete = adapterDerived.delete.bind(adapterDerived);\n        this.destroy = adapterDerived.destroy.bind(adapterDerived);\n        this.get = adapterDerived.get.bind(adapterDerived);\n        Object.freeze(this);\n    }\n}\n\n/**\n */\nlet Indexer$1 = class Indexer extends AdapterIndexer {\n    /**\n     * @inheritDoc\n     */\n    createSortFn() {\n        return (a, b) => this.sortData.compareFn(this.hostData[0][a], this.hostData[0][b]);\n    }\n    /**\n     * Provides the custom filter / reduce step that is ~25-40% faster than implementing with `Array.reduce`.\n     *\n     * Note: Other loop unrolling techniques like Duff's Device gave a slight faster lower bound on large data sets,\n     * but the maintenance factor is not worth the extra complication.\n     *\n     * @returns New filtered index array.\n     */\n    reduceImpl() {\n        const data = [];\n        const array = this.hostData[0];\n        if (!array) {\n            return data;\n        }\n        const filters = this.filtersData.filters;\n        let include = true;\n        const parentIndex = this.indexData.parent;\n        // Source index data is coming from an active parent index.\n        if (DynReducerUtils.isIterable(parentIndex) && parentIndex.active) {\n            for (const adjustedIndex of parentIndex) {\n                const value = array[adjustedIndex];\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(adjustedIndex);\n                }\n            }\n        }\n        else {\n            for (let cntr = 0, length = array.length; cntr < length; cntr++) {\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(array[cntr])) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(cntr);\n                }\n            }\n        }\n        return data;\n    }\n    /**\n     * Update the reducer indexes. If there are changes subscribers are notified. If data order is changed externally\n     * pass in true to force an update to subscribers.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    update(force = false) {\n        if (this.destroyed) {\n            return;\n        }\n        const oldIndex = this.indexData.index;\n        const oldHash = this.indexData.hash;\n        const array = this.hostData[0];\n        const parentIndex = this.indexData.parent;\n        // Clear index if there are no filters and no sort function or the index length doesn't match the item length.\n        if ((this.filtersData.filters.length === 0 && !this.sortData.compareFn) ||\n            (this.indexData.index && array?.length !== this.indexData.index.length)) {\n            this.indexData.index = null;\n        }\n        // If there are filters build new index.\n        if (this.filtersData.filters.length > 0) {\n            this.indexData.index = this.reduceImpl();\n        }\n        // If the index isn't built yet and there is an active parent index then create it from the parent.\n        if (!this.indexData.index && parentIndex?.active) {\n            this.indexData.index = [...parentIndex];\n        }\n        if (this.sortData.compareFn && Array.isArray(array)) {\n            // If there is no index then create one with keys matching host item length.\n            if (!this.indexData.index) {\n                this.indexData.index = [...Array(array.length).keys()];\n            }\n            this.indexData.index.sort(this.sortFn);\n        }\n        this.calcHashUpdate(oldIndex, oldHash, force);\n        // Update all derived reducers.\n        this.derivedAdapter?.update(force);\n    }\n};\n\n/**\n * Provides the base implementation derived reducer for arrays / DynArrayReducer.\n */\nclass DynArrayReducerDerived {\n    #array;\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * @param array - Data host array.\n     *\n     * @param parentIndex - Parent indexer.\n     *\n     * @param options - Any filters and sort functions to apply.\n     */\n    constructor(array, parentIndex, options) {\n        this.#array = array;\n        this.#index = new Indexer$1(this.#array, this.#updateSubscribers.bind(this), parentIndex);\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#array, this.#indexPublicAPI, DynArrayReducerDerived);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        let filters = void 0;\n        let sort = void 0;\n        if (options !== void 0 && ('filters' in options || 'sort' in options)) {\n            if (options.filters !== void 0) {\n                if (DynReducerUtils.isIterable(options.filters)) {\n                    filters = options.filters;\n                }\n                else {\n                    throw new TypeError(`DerivedArrayReducer error (DataDerivedOptions): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (options.sort !== void 0) {\n                if (typeof options.sort === 'function') {\n                    sort = options.sort;\n                }\n                else if (typeof options.sort === 'object' && options.sort !== null) {\n                    sort = options.sort;\n                }\n                else {\n                    throw new TypeError(`DerivedArrayReducer error (DataDerivedOptions): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: if an array is set as initial data then that array is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link IndexerAPI.update} with `true` to recalculate the index and\n     * notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#array[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * Returns the Indexer public API.\n     *\n     * @returns Indexer API - is also iterable.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this derived reducer is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * @returns Main data / items length or indexed length.\n     */\n    get length() {\n        const array = this.#array[0];\n        return this.#index.active ? this.index.length :\n            array ? array.length : 0;\n    }\n    /**\n     * @returns Gets current reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DerivedArrayReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        this.#destroyed = true;\n        // Remove any external data reference and perform a final update.\n        this.#array = [null];\n        this.#index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#derived.destroy();\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom derived reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Provides an iterator for data stored in DerivedArrayReducer.\n     *\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const array = this.#array[0];\n        if (this.#destroyed || array === null || array?.length === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const entry of this.index) {\n                yield array[entry];\n            }\n        }\n        else {\n            if (this.reversed) {\n                for (let cntr = array.length; --cntr >= 0;) {\n                    yield array[cntr];\n                }\n            }\n            else {\n                for (let cntr = 0; cntr < array.length; cntr++) {\n                    yield array[cntr];\n                }\n            }\n        }\n    }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Subscribe to this DerivedArrayReducer.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n}\n\n/**\n * Provides a managed array with non-destructive reducing / filtering / sorting capabilities with subscription /\n * Svelte store support.\n */\nclass DynArrayReducer {\n    #array = [null];\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * Initializes DynArrayReducer. Any iterable is supported for initial data. Take note that if `data` is an array it\n     * will be used as the host array and not copied. All non-array iterables otherwise create a new array / copy.\n     *\n     * @param [data] - Data iterable to store if array or copy otherwise.\n     */\n    constructor(data) {\n        let dataIterable = void 0;\n        let filters = void 0;\n        let sort = void 0;\n        if (data === null) {\n            throw new TypeError(`DynArrayReducer error: 'data' is not iterable.`);\n        }\n        if (data !== void 0 && typeof data !== 'object' && !DynReducerUtils.isIterable(data)) {\n            throw new TypeError(`DynArrayReducer error: 'data' is not iterable.`);\n        }\n        if (data !== void 0 && Symbol.iterator in data) {\n            dataIterable = data;\n        }\n        else if (data !== void 0 && ('data' in data || 'filters' in data || 'sort' in data)) {\n            if (data.data !== void 0 && !DynReducerUtils.isIterable(data.data)) {\n                throw new TypeError(`DynArrayReducer error (DataDynArray): 'data' attribute is not iterable.`);\n            }\n            dataIterable = data.data;\n            if (data.filters !== void 0) {\n                if (DynReducerUtils.isIterable(data.filters)) {\n                    filters = data.filters;\n                }\n                else {\n                    throw new TypeError(`DynArrayReducer error (DataDynArray): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (data.sort !== void 0) {\n                if (typeof data.sort === 'function') {\n                    sort = data.sort;\n                }\n                else if (typeof data.sort === 'object' && data.sort !== null) {\n                    sort = data.sort;\n                }\n                else {\n                    throw new TypeError(`DynArrayReducer error (DataDynArray): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // In the case of the main data being an array directly use the array otherwise create a copy.\n        if (dataIterable) {\n            this.#array[0] = Array.isArray(dataIterable) ? dataIterable : [...dataIterable];\n        }\n        this.#index = new Indexer$1(this.#array, this.#updateSubscribers.bind(this));\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#array, this.#indexPublicAPI, DynArrayReducerDerived);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: if an array is set as initial data then that array is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link AdapterIndexer.index.update} with `true` to recalculate the\n     * index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#array[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * @returns Returns the Indexer public API.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this instance is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * Gets the main data / items length.\n     *\n     * @returns {number} Main data / items length.\n     */\n    get length() {\n        const array = this.#array[0];\n        return this.#index.active ? this.#indexPublicAPI.length :\n            array ? array.length : 0;\n    }\n    /**\n     * Gets current reversed state.\n     *\n     * @returns {boolean} Reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DynArrayReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.#destroyed = true;\n        this.#derived.destroy();\n        // Set the backing data to null and provide a final update.\n        this.#array = [null];\n        this.index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Removes internal data and pushes new data. This does not destroy any initial array set to internal data unless\n     * `replace` is set to true.\n     *\n     * @param data - New data to set to internal data.\n     *\n     * @param replace=false - New data to set to internal data.\n     */\n    setData(data, replace = false) {\n        if (data !== null && !DynReducerUtils.isIterable(data)) {\n            throw new TypeError(`DynArrayReducer.setData error: 'data' is not iterable.`);\n        }\n        if (typeof replace !== 'boolean') {\n            throw new TypeError(`DynArrayReducer.setData error: 'replace' is not a boolean.`);\n        }\n        const array = this.#array[0];\n        // If the array isn't defined or 'replace' is true then replace internal data with new array or create an array\n        // from an iterable.\n        if (!Array.isArray(array) || replace) {\n            if (data) {\n                this.#array[0] = Array.isArray(data) ? data : [...data];\n            }\n        }\n        else {\n            if (data) {\n                // Remove all entries in internal data. This will not replace any initially set array.\n                array.length = 0;\n                // Add all new data.\n                array.push(...data);\n            }\n            else {\n                this.#array[0] = null;\n            }\n        }\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Add a subscriber to this DynArrayReducer instance.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n    /**\n     * Provides an iterator for data stored in DynArrayReducer.\n     *\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const array = this.#array[0];\n        if (this.#destroyed || array === null || array?.length === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const entry of this.index) {\n                yield array[entry];\n            }\n        }\n        else {\n            if (this.reversed) {\n                for (let cntr = array.length; --cntr >= 0;) {\n                    yield array[cntr];\n                }\n            }\n            else {\n                for (let cntr = 0; cntr < array.length; cntr++) {\n                    yield array[cntr];\n                }\n            }\n        }\n    }\n}\n\n/**\n */\nclass Indexer extends AdapterIndexer {\n    /**\n     * @inheritDoc\n     */\n    createSortFn() {\n        return (a, b) => this.sortData.compareFn(this.hostData[0].get(a), this.hostData[0].get(b));\n    }\n    /**\n     * Provides the custom filter / reduce step that is ~25-40% faster than implementing with `Array.reduce`.\n     *\n     * Note: Other loop unrolling techniques like Duff's Device gave a slight faster lower bound on large data sets,\n     * but the maintenance factor is not worth the extra complication.\n     *\n     * @returns New filtered index array.\n     */\n    reduceImpl() {\n        const data = [];\n        const map = this.hostData[0];\n        if (!map) {\n            return data;\n        }\n        const filters = this.filtersData.filters;\n        let include = true;\n        const parentIndex = this.indexData.parent;\n        // Source index data is coming from an active parent index.\n        if (DynReducerUtils.isIterable(parentIndex) && parentIndex.active) {\n            for (const key of parentIndex) {\n                const value = map.get(key);\n                include = true;\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(key);\n                }\n            }\n        }\n        else {\n            for (const key of map.keys()) {\n                include = true;\n                const value = map.get(key);\n                for (let filCntr = 0, filLength = filters.length; filCntr < filLength; filCntr++) {\n                    if (!filters[filCntr].filter(value)) {\n                        include = false;\n                        break;\n                    }\n                }\n                if (include) {\n                    data.push(key);\n                }\n            }\n        }\n        return data;\n    }\n    /**\n     * Update the reducer indexes. If there are changes subscribers are notified. If data order is changed externally\n     * pass in true to force an update to subscribers.\n     *\n     * @param [force=false] - When true forces an update to subscribers.\n     */\n    update(force = false) {\n        if (this.destroyed) {\n            return;\n        }\n        const oldIndex = this.indexData.index;\n        const oldHash = this.indexData.hash;\n        const map = this.hostData[0];\n        const parentIndex = this.indexData.parent;\n        // Clear index if there are no filters and no sort function or the index length doesn't match the item length.\n        if ((this.filtersData.filters.length === 0 && !this.sortData.compareFn) ||\n            (this.indexData.index && map?.size !== this.indexData.index.length)) {\n            this.indexData.index = null;\n        }\n        // If there are filters build new index.\n        if (this.filtersData.filters.length > 0) {\n            this.indexData.index = this.reduceImpl();\n        }\n        // If the index isn't built yet and there is an active parent index then create it from the parent.\n        if (!this.indexData.index && parentIndex?.active) {\n            this.indexData.index = [...parentIndex];\n        }\n        if (this.sortData.compareFn && map instanceof Map) {\n            // If there is no index then create one with keys matching host item length.\n            if (!this.indexData.index) {\n                this.indexData.index = this.indexData.index = [...map.keys()];\n            }\n            this.indexData.index.sort(this.sortFn);\n        }\n        this.calcHashUpdate(oldIndex, oldHash, force);\n        // Update all derived reducers.\n        this.derivedAdapter?.update(force);\n    }\n}\n\n/**\n * Provides the base implementation derived reducer for arrays / DynArrayReducer.\n */\nclass DynMapReducerDerived {\n    #map;\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * @param map - Data host Map.\n     *\n     * @param parentIndex - Parent indexer.\n     *\n     * @param options - Any filters and sort functions to apply.\n     */\n    constructor(map, parentIndex, options) {\n        this.#map = map;\n        this.#index = new Indexer(this.#map, this.#updateSubscribers.bind(this), parentIndex);\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#map, this.#indexPublicAPI, DynMapReducerDerived);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        let filters = void 0;\n        let sort = void 0;\n        if (options !== void 0 && ('filters' in options || 'sort' in options)) {\n            if (options.filters !== void 0) {\n                if (DynReducerUtils.isIterable(options.filters)) {\n                    filters = options.filters;\n                }\n                else {\n                    throw new TypeError(`DerivedMapReducer error (DataDerivedOptions): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (options.sort !== void 0) {\n                if (typeof options.sort === 'function') {\n                    sort = options.sort;\n                }\n                else if (typeof options.sort === 'object' && options.sort !== null) {\n                    sort = options.sort;\n                }\n                else {\n                    throw new TypeError(`DerivedMapReducer error (DataDerivedOptions): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // Add any filters and sort function defined by DataDynArray.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: The returned map is the same map set by the main reducer. If any changes are performed to the data\n     * externally do invoke {@link IndexerAPI.update} with `true` to recalculate the index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#map[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * Returns the Indexer public API.\n     *\n     * @returns Indexer API - is also iterable.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this derived reducer is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * @returns Main data / items length or indexed length.\n     */\n    get length() {\n        const map = this.#map[0];\n        return this.#index.active ? this.index.length :\n            map ? map.size : 0;\n    }\n    /**\n     * @returns Gets current reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DerivedMapReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        this.#destroyed = true;\n        // Remove any external data reference and perform a final update.\n        this.#map = [null];\n        this.#index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#derived.destroy();\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom derived reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Provides an iterator for data stored in DerivedMapReducer.\n     *\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const map = this.#map[0];\n        if (this.#destroyed || map === null || map?.size === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const key of this.index) {\n                yield map.get(key);\n            }\n        }\n        else {\n            if (this.reversed) {\n                // TODO: Not efficient due to creating temporary values array.\n                const values = [...map.values()];\n                for (let cntr = values.length; --cntr >= 0;) {\n                    yield values[cntr];\n                }\n            }\n            else {\n                for (const value of map.values()) {\n                    yield value;\n                }\n            }\n        }\n    }\n    // -------------------------------------------------------------------------------------------------------------------\n    /**\n     * Subscribe to this DerivedMapReducer.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n}\n\n/**\n * Provides a managed Map with non-destructive reducing / filtering / sorting capabilities with subscription /\n * Svelte store support.\n */\nclass DynMapReducer {\n    #map = [null];\n    #derived;\n    #derivedPublicAPI;\n    #filters;\n    #filtersData = { filters: [] };\n    #index;\n    #indexPublicAPI;\n    #reversed = false;\n    #sort;\n    #sortData = { compareFn: null };\n    #subscriptions = [];\n    #destroyed = false;\n    /**\n     * Initializes DynMapReducer. Any iterable is supported for initial data. Take note that if `data` is an array it\n     * will be used as the host array and not copied. All non-array iterables otherwise create a new array / copy.\n     *\n     * @param [data] - Data iterable to store if array or copy otherwise.\n     */\n    constructor(data) {\n        let dataMap = void 0;\n        let filters = void 0;\n        let sort = void 0;\n        if (data === null) {\n            throw new TypeError(`DynMapReducer error: 'data' is not an object or Map.`);\n        }\n        if (data !== void 0 && typeof data !== 'object' && !(data instanceof Map)) {\n            throw new TypeError(`DynMapReducer error: 'data' is not an object or Map.`);\n        }\n        if (data !== void 0 && data instanceof Map) {\n            dataMap = data;\n        }\n        else if (data !== void 0 && ('data' in data || 'filters' in data || 'sort' in data)) {\n            if (data.data !== void 0 && !(data.data instanceof Map)) {\n                throw new TypeError(`DynMapReducer error (DataDynMap): 'data' attribute is not a Map.`);\n            }\n            dataMap = data.data;\n            if (data.filters !== void 0) {\n                if (DynReducerUtils.isIterable(data.filters)) {\n                    filters = data.filters;\n                }\n                else {\n                    throw new TypeError(`DynMapReducer error (DataDynMap): 'filters' attribute is not iterable.`);\n                }\n            }\n            if (data.sort !== void 0) {\n                if (typeof data.sort === 'function') {\n                    sort = data.sort;\n                }\n                else if (typeof data.sort === 'object' && data.sort !== null) {\n                    sort = data.sort;\n                }\n                else {\n                    throw new TypeError(`DynMapReducer error (DataDynMap): 'sort' attribute is not a function or object.`);\n                }\n            }\n        }\n        // In the case of the main data being an array directly use the array otherwise create a copy.\n        if (dataMap) {\n            this.#map[0] = dataMap;\n        }\n        this.#index = new Indexer(this.#map, this.#updateSubscribers.bind(this));\n        this.#indexPublicAPI = new IndexerAPI(this.#index);\n        this.#filters = new AdapterFilters(this.#indexPublicAPI.update, this.#filtersData);\n        this.#sort = new AdapterSort(this.#indexPublicAPI.update, this.#sortData);\n        this.#derived = new AdapterDerived(this.#map, this.#indexPublicAPI, DynMapReducerDerived);\n        this.#derivedPublicAPI = new DerivedAPI(this.#derived);\n        this.#index.initAdapters(this.#filtersData, this.#sortData, this.#derived);\n        // Add any filters and sort function defined by DataDynMap.\n        if (filters) {\n            this.filters.add(...filters);\n        }\n        if (sort) {\n            this.sort.set(sort);\n        }\n        // Invoke an custom initialization for child classes.\n        this.initialize();\n    }\n    /**\n     * Returns the internal data of this instance. Be careful!\n     *\n     * Note: When a map is set as data then that map is used as the internal data. If any changes are\n     * performed to the data externally do invoke {@link AdapterIndexer.index.update} with `true` to recalculate the\n     * index and notify all subscribers.\n     *\n     * @returns The internal data.\n     */\n    get data() { return this.#map[0]; }\n    /**\n     * @returns Derived public API.\n     */\n    get derived() { return this.#derivedPublicAPI; }\n    /**\n     * @returns The filters adapter.\n     */\n    get filters() { return this.#filters; }\n    /**\n     * @returns Returns the Indexer public API.\n     */\n    get index() { return this.#indexPublicAPI; }\n    /**\n     * Returns whether this instance is destroyed.\n     */\n    get destroyed() { return this.#destroyed; }\n    /**\n     * Gets the main data / items length.\n     *\n     * @returns {number} Main data / items length.\n     */\n    get length() {\n        const map = this.#map[0];\n        return this.#index.active ? this.#indexPublicAPI.length :\n            map ? map.size : 0;\n    }\n    /**\n     * Gets current reversed state.\n     *\n     * @returns {boolean} Reversed state.\n     */\n    get reversed() { return this.#reversed; }\n    /**\n     * @returns The sort adapter.\n     */\n    get sort() { return this.#sort; }\n    /**\n     * Sets reversed state and notifies subscribers.\n     *\n     * @param reversed - New reversed state.\n     */\n    set reversed(reversed) {\n        if (typeof reversed !== 'boolean') {\n            throw new TypeError(`DynMapReducer.reversed error: 'reversed' is not a boolean.`);\n        }\n        this.#reversed = reversed;\n        this.#index.reversed = reversed;\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Removes all derived reducers, subscriptions, and cleans up all resources.\n     */\n    destroy() {\n        if (this.#destroyed) {\n            return;\n        }\n        this.#destroyed = true;\n        this.#derived.destroy();\n        // Set the backing data to null and provide a final update.\n        this.#map = [null];\n        this.index.update(true);\n        // Remove all subscriptions.\n        this.#subscriptions.length = 0;\n        this.#index.destroy();\n        this.#filters.clear();\n        this.#sort.clear();\n    }\n    /**\n     * Provides a callback for custom reducers to initialize any data / custom configuration. This allows\n     * child classes to avoid implementing the constructor.\n     *\n     * @protected\n     */\n    initialize() { }\n    /**\n     * Removes internal data and pushes new data. This does not destroy any initial array set to internal data unless\n     * `replace` is set to true.\n     *\n     * @param data - New data to set to internal data.\n     *\n     * @param replace=false - New data to set to internal data.\n     */\n    setData(data, replace = false) {\n        if (data !== null && !(data instanceof Map)) {\n            throw new TypeError(`DynMapReducer.setData error: 'data' is not iterable.`);\n        }\n        if (typeof replace !== 'boolean') {\n            throw new TypeError(`DynMapReducer.setData error: 'replace' is not a boolean.`);\n        }\n        const map = this.#map[0];\n        // If the array isn't defined or 'replace' is true then replace internal data with new array or create an array\n        // from an iterable.\n        if (!(map instanceof Map) || replace) {\n            this.#map[0] = data instanceof Map ? data : null;\n        }\n        else if (data instanceof Map && map instanceof Map) {\n            // Create a set of all current entry IDs.\n            const removeKeySet = new Set(map.keys());\n            for (const key of data.keys()) {\n                map.set(key, data.get(key));\n                if (removeKeySet.has(key)) {\n                    removeKeySet.delete(key);\n                }\n            }\n            // Remove entries that are no longer in data.\n            for (const key of removeKeySet) {\n                map.delete(key);\n            }\n        }\n        else if (data === null) {\n            this.#map[0] = null;\n        }\n        // Recalculate index and force an update to any subscribers.\n        this.index.update(true);\n    }\n    /**\n     * Add a subscriber to this DynMapReducer instance.\n     *\n     * @param handler - Callback function that is invoked on update / changes. Receives `this` reference.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscriptions.push(handler); // add handler to the array of subscribers\n        handler(this); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscriptions.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscriptions.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers on changes.\n     */\n    #updateSubscribers() {\n        for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) {\n            this.#subscriptions[cntr](this);\n        }\n    }\n    /**\n     * Provides an iterator for data stored in DynMapReducer.\n     *\n     * @yields {T}\n     */\n    *[Symbol.iterator]() {\n        const map = this.#map[0];\n        if (this.#destroyed || map === null || map?.size === 0) {\n            return;\n        }\n        if (this.#index.active) {\n            for (const key of this.index) {\n                yield map.get(key);\n            }\n        }\n        else {\n            if (this.reversed) {\n                // TODO: Not efficient due to creating temporary values array.\n                const values = [...map.values()];\n                for (let cntr = values.length; --cntr >= 0;) {\n                    yield values[cntr];\n                }\n            }\n            else {\n                for (const value of map.values()) {\n                    yield value;\n                }\n            }\n        }\n    }\n}\n\n/**\r\n * Provides a basic test for a given variable to test if it has the shape of a readable store by having a `subscribe`\r\n * function.\r\n *\r\n * Note: functions are also objects, so test that the variable might be a function w/ a `subscribe` function.\r\n *\r\n * @param {*}  store - variable to test that might be a store.\r\n *\r\n * @returns {boolean} Whether the variable tested has the shape of a store.\r\n */\r\n\r\n/**\r\n * Provides a basic test for a given variable to test if it has the shape of a writable store by having a `subscribe`\r\n * `set`, and `update` functions.\r\n *\r\n * Note: functions are also objects, so test that the variable might be a function w/ `subscribe` & `set` functions.\r\n *\r\n * @param {*}  store - variable to test that might be a store.\r\n *\r\n * @returns {boolean} Whether the variable tested has the shape of a store.\r\n */\r\nfunction isWritableStore(store)\r\n{\r\n   if (store === null || store === void 0) { return false; }\r\n\r\n   switch (typeof store)\r\n   {\r\n      case 'function':\r\n      case 'object':\r\n         return typeof store.subscribe === 'function' && typeof store.set === 'function';\r\n   }\r\n\r\n   return false;\r\n}\r\n\r\n/**\r\n * Subscribes to the given store with the update function provided and ignores the first automatic\r\n * update. All future updates are dispatched to the update function.\r\n *\r\n * @param {import('#svelte/store').Readable | import('#svelte/store').Writable} store -\r\n *  Store to subscribe to...\r\n *\r\n * @param {import('#svelte/store').Updater} update - function to receive future updates.\r\n *\r\n * @returns {import('#svelte/store').Unsubscriber} Store unsubscribe function.\r\n */\r\nfunction subscribeIgnoreFirst(store, update)\r\n{\r\n   let firedFirst = false;\r\n\r\n   return store.subscribe((value) =>\r\n   {\r\n      if (!firedFirst)\r\n      {\r\n         firedFirst = true;\r\n      }\r\n      else\r\n      {\r\n         update(value);\r\n      }\r\n   });\r\n}\n\n/**\r\n * Provides a base implementation for store entries in {@link ArrayObjectStore}.\r\n *\r\n * In particular providing the required getting / accessor for the 'id' property.\r\n */\r\nclass ObjectEntryStore\r\n{\r\n   /**\r\n    * @type {object}\r\n    */\r\n   #data;\r\n\r\n   /**\r\n    * Stores the subscribers.\r\n    *\r\n    * @type {(function(object): void)[]}\r\n    */\r\n   #subscriptions = [];\r\n\r\n   /**\r\n    * @param {object}   data -\r\n    */\r\n   constructor(data = {})\r\n   {\r\n      if (!isObject(data)) { throw new TypeError(`'data' is not an object.`); }\r\n\r\n      this.#data = data;\r\n\r\n      // If an id is missing then add it.\r\n      if (typeof data.id !== 'string') { this.#data.id = uuidv4(); }\r\n\r\n      if (!uuidv4.isValid(data.id)) { throw new Error(`'data.id' (${data.id}) is not a valid UUIDv4 string.`); }\r\n   }\r\n\r\n   /**\r\n    * Invoked by ArrayObjectStore to provide custom duplication. Override this static method in your entry store.\r\n    *\r\n    * @param {object}   data - A copy of local data w/ new ID already set.\r\n    *\r\n    * @param {import('./ArrayObjectStore.js').ArrayObjectStore} arrayStore - The source ArrayObjectStore instance.\r\n    */\r\n   static duplicate(data, arrayStore) {}  // eslint-disable-line no-unused-vars\r\n\r\n   /**\r\n    * @returns {object} The object data tracked by this store.\r\n    * @protected\r\n    */\r\n   get _data() { return this.#data; }\r\n\r\n   // ----------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @returns {string} The ID attribute in object data tracked by this store.\r\n    */\r\n   get id() { return this.#data.id; }\r\n\r\n   toJSON()\r\n   {\r\n      return this.#data;\r\n   }\r\n\r\n   /**\r\n    * @param {function(object): void} handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler);  // add handler to the array of subscribers\r\n\r\n      handler(this.#data);                // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @protected\r\n    */\r\n   _updateSubscribers()\r\n   {\r\n      const subscriptions = this.#subscriptions;\r\n\r\n      const data = this.#data;\r\n\r\n      for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](data); }\r\n   }\r\n}\n\n/**\r\n * @template [T=import('./').BaseArrayObjectEntryStore]\r\n */\r\nclass ArrayObjectStore\r\n{\r\n   /** @type {T[]} */\r\n   #data = [];\r\n\r\n   /**\r\n    * @type {Map<string, { store: T, unsubscribe: Function}>}\r\n    */\r\n   #dataMap = new Map();\r\n\r\n   /**\r\n    * @type {DynArrayReducer<T>}\r\n    */\r\n   #dataReducer;\r\n\r\n   /**\r\n    * @type {boolean}\r\n    */\r\n   #manualUpdate;\r\n\r\n   /**\r\n    * @type {T}\r\n    */\r\n   #StoreClass;\r\n\r\n   /**\r\n    * Stores the subscribers.\r\n    *\r\n    * @type {(function(T[]): void)[]}\r\n    */\r\n   #subscriptions = [];\r\n\r\n   /**\r\n    * @type {Function}\r\n    */\r\n   #updateSubscribersBound;\r\n\r\n   /**\r\n    * @returns {ObjectEntryStore} The default object entry store constructor.\r\n    */\r\n   static get EntryStore() { return ObjectEntryStore; }\r\n\r\n   /**\r\n    * @param {import('./index.js').ArrayObjectStoreParams} params -\r\n    */\r\n   constructor({ StoreClass, defaultData = [], childDebounce = 250, dataReducer = false, manualUpdate = false } = {})\r\n   {\r\n      if (!Number.isInteger(childDebounce) || childDebounce < 0 || childDebounce > 1000)\r\n      {\r\n         throw new TypeError(`'childDebounce' must be an integer between and including 0 - 1000.`);\r\n      }\r\n\r\n      if (typeof manualUpdate !== 'boolean') { throw new TypeError(`'manualUpdate' is not a boolean.`); }\r\n\r\n      if (!isWritableStore(StoreClass.prototype))\r\n      {\r\n         throw new TypeError(`'StoreClass' is not a writable store constructor.`);\r\n      }\r\n\r\n      let hasIDGetter = false;\r\n\r\n      // Walk parent prototype chain. Check for descriptor at each prototype level.\r\n      for (let o = StoreClass.prototype; o; o = Object.getPrototypeOf(o))\r\n      {\r\n         const descriptor = Object.getOwnPropertyDescriptor(o, 'id');\r\n         if (descriptor !== void 0 && descriptor.get !== void 0)\r\n         {\r\n            hasIDGetter = true;\r\n            break;\r\n         }\r\n      }\r\n\r\n      if (!hasIDGetter)\r\n      {\r\n         throw new TypeError(`'StoreClass' does not have a getter accessor for 'id' property.`);\r\n      }\r\n\r\n      if (!Array.isArray(defaultData)) { throw new TypeError(`'defaultData' is not an array.`); }\r\n\r\n      this.#manualUpdate = manualUpdate;\r\n\r\n      this.#StoreClass = StoreClass;\r\n\r\n      if (dataReducer) { this.#dataReducer = new DynArrayReducer({ data: this.#data }); }\r\n\r\n      // Prepare a debounced callback that is used for all child store entry subscriptions.\r\n      this.#updateSubscribersBound = childDebounce === 0 ? this.updateSubscribers.bind(this) :\r\n       debounce((data) => this.updateSubscribers(data), childDebounce);\r\n   }\r\n\r\n   /**\r\n    * Provide an iterator for public access to entry stores.\r\n    *\r\n    * @yields {T | void}\r\n    */\r\n   *[Symbol.iterator]()\r\n   {\r\n      if (this.#data.length === 0) { return; }\r\n\r\n      for (const entryStore of this.#data) { yield entryStore; }\r\n   }\r\n\r\n   /**\r\n    * @returns {T[]} The internal data array tracked allowing child classes direct access.\r\n    * @protected\r\n    */\r\n   get _data() { return this.#data; }\r\n\r\n   /**\r\n    * @returns {DynArrayReducer<T>} The data reducer.\r\n    */\r\n   get dataReducer()\r\n   {\r\n      if (!this.#dataReducer)\r\n      {\r\n         throw new Error(\r\n          `'dataReducer' is not initialized; did you forget to specify 'dataReducer' as true in constructor options?`);\r\n      }\r\n\r\n      return this.#dataReducer;\r\n   }\r\n\r\n   /**\r\n    * @returns {number} The length of all data.\r\n    */\r\n   get length() { return this.#data.length; }\r\n\r\n   /**\r\n    * Removes all child store entries.\r\n    */\r\n   clearEntries()\r\n   {\r\n      for (const storeEntryData of this.#dataMap.values()) { storeEntryData.unsubscribe(); }\r\n\r\n      this.#dataMap.clear();\r\n      this.#data.length = 0;\r\n\r\n      this.updateSubscribers();\r\n   }\r\n\r\n   /**\r\n    * Creates a new store from given data.\r\n    *\r\n    * @param {object}   entryData -\r\n    *\r\n    * @returns {T} The store\r\n    */\r\n   createEntry(entryData = {})\r\n   {\r\n      if (!isObject(entryData)) { throw new TypeError(`'entryData' is not an object.`); }\r\n\r\n      if (typeof entryData.id !== 'string') { entryData.id = uuidv4(); }\r\n\r\n      if (this.#data.findIndex((entry) => entry.id === entryData.id) >= 0)\r\n      {\r\n         throw new Error(`'entryData.id' (${entryData.id}) already in this ArrayObjectStore instance.`);\r\n      }\r\n\r\n      const store = this.#createStore(entryData);\r\n\r\n      this.updateSubscribers();\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Add a new store entry from the given data.\r\n    *\r\n    * @param {object}   entryData -\r\n    *\r\n    * @returns {T} New store entry instance.\r\n    */\r\n   #createStore(entryData)\r\n   {\r\n      const store = new this.#StoreClass(entryData, this);\r\n\r\n      if (!uuidv4.isValid(store.id))\r\n      {\r\n         throw new Error(`'store.id' (${store.id}) is not a UUIDv4 compliant string.`);\r\n      }\r\n\r\n      const unsubscribe = subscribeIgnoreFirst(store, this.#updateSubscribersBound);\r\n\r\n      this.#data.push(store);\r\n      this.#dataMap.set(entryData.id, { store, unsubscribe });\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Deletes a given entry store by ID from this world setting array store instance.\r\n    *\r\n    * @param {string}  id - ID of entry to delete.\r\n    *\r\n    * @returns {boolean} Delete operation successful.\r\n    */\r\n   deleteEntry(id)\r\n   {\r\n      const result = this.#deleteStore(id);\r\n\r\n      if (result) { this.updateSubscribers(); }\r\n\r\n      return result;\r\n   }\r\n\r\n   #deleteStore(id)\r\n   {\r\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\r\n\r\n      const storeEntryData = this.#dataMap.get(id);\r\n      if (storeEntryData)\r\n      {\r\n         storeEntryData.unsubscribe();\r\n\r\n         this.#dataMap.delete(id);\r\n\r\n         const index = this.#data.findIndex((entry) => entry.id === id);\r\n         if (index >= 0) { this.#data.splice(index, 1); }\r\n\r\n         return true;\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * Duplicates an entry store by the given ID.\r\n    *\r\n    * @param {string}   id - UUIDv4 string.\r\n    *\r\n    * @returns {*} Instance of StoreClass.\r\n    */\r\n   duplicateEntry(id)\r\n   {\r\n      if (typeof id !== 'string') { throw new TypeError(`'id' is not a string.`); }\r\n\r\n      const storeEntryData = this.#dataMap.get(id);\r\n\r\n      if (storeEntryData)\r\n      {\r\n         const data = klona(storeEntryData.store.toJSON());\r\n         data.id = uuidv4();\r\n\r\n         // Allow StoreClass to statically perform any specialized duplication.\r\n         this.#StoreClass?.duplicate?.(data, this);\r\n\r\n         return this.createEntry(data);\r\n      }\r\n\r\n      return void 0;\r\n   }\r\n\r\n   /**\r\n    * Find an entry in the backing child store array.\r\n    *\r\n    * @param {function(T): T|void}  predicate - A predicate function\r\n    *\r\n    * @returns {T|void} Found entry in array or undefined.\r\n    */\r\n   findEntry(predicate)\r\n   {\r\n      return this.#data.find(predicate);\r\n   }\r\n\r\n   /**\r\n    * Finds an entry store instance by 'id' / UUIDv4.\r\n    *\r\n    * @param {string}   id - A UUIDv4 string.\r\n    *\r\n    * @returns {T|void} Entry store instance.\r\n    */\r\n   getEntry(id)\r\n   {\r\n      const storeEntryData = this.#dataMap.get(id);\r\n      return storeEntryData ? storeEntryData.store : void 0;\r\n   }\r\n\r\n   /**\r\n    * Sets the children store data by 'id', adds new entry store instances, or removes entries that are no longer in the\r\n    * update list.\r\n    *\r\n    * @param {T[]}   updateList -\r\n    */\r\n   set(updateList)\r\n   {\r\n      if (!Array.isArray(updateList))\r\n      {\r\n         console.warn(`ArrayObjectStore.set warning: aborting set operation as 'updateList' is not an array.`);\r\n         return;\r\n      }\r\n\r\n      const data = this.#data;\r\n      const dataMap = this.#dataMap;\r\n\r\n      // Create a set of all current entry IDs.\r\n      const removeIDSet = new Set(dataMap.keys());\r\n\r\n      let rebuildIndex = false;\r\n\r\n      for (let updateIndex = 0; updateIndex < updateList.length; updateIndex++)\r\n      {\r\n         const updateData = updateList[updateIndex];\r\n\r\n         const id = updateData.id;\r\n\r\n         if (typeof id !== 'string') { throw new Error(`'updateData.id' is not a string.`); }\r\n\r\n         const localIndex = data.findIndex((entry) => entry.id === id);\r\n\r\n         if (localIndex >= 0)\r\n         {\r\n            const localEntry = data[localIndex];\r\n\r\n            // Update the entry data.\r\n            localEntry.set(updateData);\r\n\r\n            // Must move to correct position\r\n            if (localIndex !== updateIndex)\r\n            {\r\n               // Remove from current location.\r\n               data.splice(localIndex, 1);\r\n\r\n               if (updateIndex < data.length)\r\n               {\r\n                  // Insert at new location.\r\n                  data.splice(updateIndex, 0, localEntry);\r\n               }\r\n               else\r\n               {\r\n                  // Local data length is less than update data index; rebuild index.\r\n                  rebuildIndex = true;\r\n               }\r\n            }\r\n\r\n            // Delete from removeIDSet as entry is still in local data.\r\n            removeIDSet.delete(id);\r\n         }\r\n         else\r\n         {\r\n            this.#createStore(updateData);\r\n         }\r\n      }\r\n\r\n      if (rebuildIndex)\r\n      {\r\n         // Must invoke unsubscribe for all child stores.\r\n         for (const storeEntryData of dataMap.values()) { storeEntryData.unsubscribe(); }\r\n\r\n         data.length = 0;\r\n         dataMap.clear();\r\n\r\n         for (const updateData of updateList) { this.#createStore(updateData); }\r\n      }\r\n      else\r\n      {\r\n         // Remove entries that are no longer in data.\r\n         for (const id of removeIDSet) { this.#deleteStore(id); }\r\n      }\r\n\r\n      this.updateSubscribers();\r\n   }\r\n\r\n   toJSON()\r\n   {\r\n      return this.#data;\r\n   }\r\n\r\n// -------------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @param {function(T[]): void} handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this.#data);                     // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers.\r\n    *\r\n    * @param {import('./index.js').ArrayObjectUpdateData}  [update] -\r\n    */\r\n   updateSubscribers(update)\r\n   {\r\n      const updateGate = typeof update === 'boolean' ? update : !this.#manualUpdate;\r\n\r\n      if (updateGate)\r\n      {\r\n         const subscriptions = this.#subscriptions;\r\n\r\n         const data = this.#data;\r\n\r\n         for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](data); }\r\n      }\r\n\r\n      // This will update the filtered data and `dataReducer` store and forces an update to subscribers.\r\n      if (this.#dataReducer) { this.#dataReducer.index.update(true); }\r\n   }\r\n}\n\n/**\r\n * @template [T=import('./').BaseArrayObjectEntryStore]\r\n * @augments {ArrayObjectStore<T>}\r\n */\r\nclass CrudArrayObjectStore extends ArrayObjectStore\r\n{\r\n   /** @type {CrudDispatch} */\r\n   #crudDispatch;\r\n\r\n   /** @type {object} */\r\n   #extraData;\r\n\r\n   /**\r\n    * @param {object}                  [opts] - Optional parameters.\r\n    *\r\n    * @param {CrudDispatch}            [opts.crudDispatch] -\r\n    *\r\n    * @param {object}                  [opts.extraData] -\r\n    *\r\n    * @param {import('./index.js').ArrayObjectStoreParams}  [opts.rest] - Rest of ArrayObjectStore parameters.\r\n    */\r\n   constructor({ crudDispatch, extraData, ...rest })\r\n   {\r\n      // 'manualUpdate' is set to true if 'crudUpdate' is defined, but can be overridden by `...rest`.\r\n      super({\r\n         manualUpdate: typeof crudDispatch === 'function',\r\n         ...rest,\r\n      });\r\n\r\n      if (crudDispatch !== void 0 && typeof crudDispatch !== 'function')\r\n      {\r\n         throw new TypeError(`'crudDispatch' is not a function.`);\r\n      }\r\n\r\n      if (extraData !== void 0 && !isObject(extraData))\r\n      {\r\n         throw new TypeError(`'extraData' is not an object.`);\r\n      }\r\n\r\n      this.#crudDispatch = crudDispatch;\r\n      this.#extraData = extraData ?? {};\r\n   }\r\n\r\n   /**\r\n    * Removes all child store entries.\r\n    */\r\n   clearEntries()\r\n   {\r\n      super.clearEntries();\r\n\r\n      if (this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({ action: 'clear', ...this.#extraData });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Creates a new store from given data.\r\n    *\r\n    * @param {object}   entryData -\r\n    *\r\n    * @returns {T} Associated store with entry data.\r\n    */\r\n   createEntry(entryData = {})\r\n   {\r\n      const store = super.createEntry(entryData);\r\n\r\n      if (store && this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({\r\n            action: 'create',\r\n            ...this.#extraData,\r\n            id: store.id,\r\n            data: store.toJSON()\r\n         });\r\n      }\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Deletes a given entry store by ID from this world setting array store instance.\r\n    *\r\n    * @param {string}  id - ID of entry to delete.\r\n    *\r\n    * @returns {boolean} Delete operation successful.\r\n    */\r\n   deleteEntry(id)\r\n   {\r\n      const result = super.deleteEntry(id);\r\n\r\n      if (result && this.#crudDispatch)\r\n      {\r\n         this.#crudDispatch({ action: 'delete', ...this.#extraData, id });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers, but provides special handling when WorldSettingArrayStore has an `crudDispatch` function\r\n    * attached. When the update is an object with a valid UUIDv4 string as the id property the `crudDispatch`\r\n    * function is invoked with  along with the data payload\r\n    *\r\n    * @param {import('./index.js').ArrayObjectUpdateData} [update] -\r\n    */\r\n   updateSubscribers(update)\r\n   {\r\n      if (this.#crudDispatch && isObject(update) && uuidv4.isValid(update.id))\r\n      {\r\n         const result = this.#crudDispatch({\r\n            action: 'update',\r\n            ...this.#extraData,\r\n            id: update.id,\r\n            data: update  // TODO: Consider using klona to clone data.\r\n         });\r\n\r\n         // If the crudDispatch function returns a boolean then invoke 'ArrayObjectStore.updateSubscribers' with it.\r\n         super.updateSubscribers(typeof result === 'boolean' ? result : update);\r\n      }\r\n      else\r\n      {\r\n         super.updateSubscribers(update);\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {import('./index.js').ArrayObjectStoreParams & CrudArrayObjectStoreParamProps} CrudArrayObjectStoreParams\r\n */\r\n\r\n/**\r\n * @typedef {object} CrudArrayObjectStoreParamProps\r\n *\r\n * @property {CrudDispatch}   [crudDispatch] -\r\n *\r\n * @property {object}         [extraData] -\r\n *\r\n * @internal\r\n */\r\n\r\n/**\r\n * @typedef {(data: { action: string, id?: string, data?: object }) => boolean} CrudDispatch\r\n *\r\n * A function that accepts an object w/ 'action', 'moduleId', 'key' properties and optional 'id' / UUIDv4 string and\r\n * 'data' property.\r\n */\n\n/**\r\n * Creates a filter function to compare objects by a give property key against a regex test. The returned function\r\n * is also a writable Svelte store that builds a regex from the stores value.\r\n *\r\n * This filter function can be used w/ a dynamic reducer and bound as a store to input elements.\r\n *\r\n * @param {string|Iterable<string>}   properties - Property key to compare.\r\n *\r\n * @param {object}   [opts] - Optional parameters.\r\n *\r\n * @param {boolean}  [opts.caseSensitive=false] - When true regex test is case-sensitive.\r\n *\r\n * @param {import('#svelte/store').Writable<string>}  [opts.store=void] - Use the provided store to instead of creating\r\n *        a default writable store.\r\n *\r\n * @returns {((data: object) => boolean) & import('#svelte/store').Writable<string>} The query string filter.\r\n */\r\nfunction regexObjectQuery(properties, { caseSensitive = false, store } = {})\r\n{\r\n   let keyword = '';\r\n   let regex;\r\n\r\n   if (store !== void 0 && !isWritableStore(store))\r\n   {\r\n      throw new TypeError(`createObjectQuery error: 'store' is not a writable store.`);\r\n   }\r\n\r\n   const storeKeyword = store ? store : writable(keyword);\r\n\r\n   // If an existing store is provided then set initial values.\r\n   if (store)\r\n   {\r\n      const current = get(store);\r\n\r\n      if (typeof current === 'string')\r\n      {\r\n         keyword = normalizeString(current);\r\n         regex = new RegExp(RegExp.escape(keyword), caseSensitive ? '' : 'i');\r\n      }\r\n      else\r\n      {\r\n         store.set(keyword);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * If there is no filter keyword / regex then do not filter otherwise filter based on the regex\r\n    * created from the search input element.\r\n    *\r\n    * @param {object} data - Data object to test against regex.\r\n    *\r\n    * @returns {boolean} AnimationStore filter state.\r\n    */\r\n   function filterQuery(data)\r\n   {\r\n      if (keyword === '' || !regex) { return true; }\r\n\r\n      if (isIterable(properties))\r\n      {\r\n         for (const property of properties)\r\n         {\r\n            if (regex.test(normalizeString(data?.[property]))) { return true; }\r\n         }\r\n\r\n         return false;\r\n      }\r\n      else\r\n      {\r\n         return regex.test(normalizeString(data?.[properties]));\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Create a custom store that changes when the search keyword changes.\r\n    *\r\n    * @param {(string) => void} handler - A callback function that accepts strings.\r\n    *\r\n    * @returns {import('#svelte/store').Unsubscriber} Store unsubscribe function.\r\n    */\r\n   filterQuery.subscribe = (handler) =>\r\n   {\r\n      return storeKeyword.subscribe(handler);\r\n   };\r\n\r\n   /**\r\n    * Set\r\n    *\r\n    * @param {string}   value - A new value for the keyword / regex test.\r\n    */\r\n   filterQuery.set = (value) =>\r\n   {\r\n      if (typeof value === 'string')\r\n      {\r\n         keyword = normalizeString(value);\r\n         regex = new RegExp(RegExp.escape(keyword), caseSensitive ? '' : 'i');\r\n         storeKeyword.set(keyword);\r\n      }\r\n   };\r\n\r\n   return filterQuery;\r\n}\n\nconst filters = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    regexObjectQuery: regexObjectQuery\n});\n\n/**\r\n * Provides helper functions to create dynamic store driven filters and sort functions for dynamic reducers. The\r\n * returned functions are also Svelte stores and can be added to a reducer as well as used as a store.\r\n */\r\nclass DynReducerHelper\r\n{\r\n   /**\r\n    * Returns the following filter functions:\r\n    * - regexObjectQuery(property, options); suitable for object reducers matching one or more properties against\r\n    *   the store value as a regex. Optional parameters to set case sensitivity and passing in an existing store.\r\n    *\r\n    * @returns {{\r\n    *    regexObjectQuery: (properties: string|Iterable<string>, options?: {caseSensitive?: boolean, store?: import('#svelte/store').Writable<string>}) => (((data: {}) => boolean) & import('#svelte/store').Writable<string>)\r\n    * }} All available filters.\r\n    */\r\n   static get filters() { return filters; }\r\n}\n\nexport { ArrayObjectStore, CrudArrayObjectStore, DynArrayReducer, DynArrayReducerDerived, DynMapReducer, DynMapReducerDerived, DynReducerHelper, ObjectEntryStore };\n//# sourceMappingURL=index.js.map\n","import { DynMapReducer }   from '@typhonjs-svelte/lib/store/reducer';\r\n\r\nimport {\r\n   hasPrototype,\r\n   isObject }              from '#svelte-fvtt/util';\r\n\r\n/**\r\n * Provides management of reactive embedded collections.\r\n *\r\n * TODO: Consider subscribing to TJSDocument rather than exposing {@link EmbeddedStoreManager.handleDocChange} and\r\n * {@link EmbeddedStoreManager.handleUpdate}\r\n */\r\nexport class EmbeddedStoreManager\r\n{\r\n   /**\r\n    * RegExp for detecting CRUD updates for renderContext.\r\n    *\r\n    * @type {RegExp}\r\n    */\r\n   static #renderContextRegex = /(create|delete|update)(\\w+)/;\r\n\r\n   /**\r\n    * @type {Map<string, EmbeddedCollectionData>}\r\n    */\r\n   #name = new Map();\r\n\r\n   /**\r\n    * @type {foundry.abstract.Document[]}\r\n    */\r\n   #document;\r\n\r\n   /**\r\n    * @type {Set<string>}\r\n    */\r\n   #embeddedNames = new Set();\r\n\r\n   /**\r\n    * @param {foundry.abstract.Document[]} document - The associated document holder.\r\n    */\r\n   constructor(document)\r\n   {\r\n      this.#document = document;\r\n\r\n      this.handleDocChange();\r\n\r\n      Object.seal(this);\r\n   }\r\n\r\n   /**\r\n    * @template T\r\n    *\r\n    * @param {string} embeddedName -\r\n    *\r\n    * @param {import('#svelte-fvtt/store/reducer').DynOptionsMapCreate<string, T>} options -\r\n    *\r\n    * @returns {import('#svelte-fvtt/store/reducer').DynMapReducer<string, T>} DynMapReducer instance\r\n    */\r\n   create(embeddedName, options)\r\n   {\r\n      /** @type {foundry.abstract.Document} */\r\n      const doc = this.#document[0];\r\n\r\n      let collection = null;\r\n\r\n      if (doc)\r\n      {\r\n         try\r\n         {\r\n            collection = doc.getEmbeddedCollection(embeddedName);\r\n         }\r\n         catch (err)\r\n         {\r\n            console.warn(`EmbeddedStoreManager.create error: No valid embedded collection for: ${embeddedName}`);\r\n         }\r\n      }\r\n\r\n      let embeddedData;\r\n\r\n      if (!this.#name.has(embeddedName))\r\n      {\r\n         embeddedData = {\r\n            collection,\r\n            stores: new Map()\r\n         };\r\n\r\n         this.#name.set(embeddedName, embeddedData);\r\n      }\r\n      else\r\n      {\r\n         embeddedData = this.#name.get(embeddedName);\r\n      }\r\n\r\n      /** @type {string} */\r\n      let name;\r\n\r\n      /** @type {import('#svelte-fvtt/store/reducer').DynDataOptions<T>} */\r\n      let rest = {};\r\n\r\n      /** @type {import('#svelte-fvtt/store/reducer').IDynMapReducerCtor<string, T>} */\r\n      let ctor;\r\n\r\n      if (typeof options === 'string')\r\n      {\r\n         name = options;\r\n         ctor = DynMapReducer;\r\n      }\r\n      else if (typeof options === 'function' && hasPrototype(options, DynMapReducer))\r\n      {\r\n         ctor = options;\r\n      }\r\n      else if (isObject(options))\r\n      {\r\n         ({ name, ctor = DynMapReducer, ...rest } = options);\r\n      }\r\n      else\r\n      {\r\n         throw new TypeError(`EmbeddedStoreManager.create error: 'options' does not conform to allowed parameters.`);\r\n      }\r\n\r\n      if (!hasPrototype(ctor, DynMapReducer))\r\n      {\r\n         throw new TypeError(`EmbeddedStoreManager.create error: 'ctor' is not a 'DynMapReducer'.`);\r\n      }\r\n\r\n      name = name ?? ctor?.name;\r\n\r\n      if (typeof name !== 'string') { throw new TypeError(`EmbeddedStoreManager.create error: 'name' is not a string.`); }\r\n\r\n      if (embeddedData.stores.has(name))\r\n      {\r\n         return embeddedData.stores.get(name);\r\n      }\r\n      else\r\n      {\r\n         const storeOptions = collection ? { data: collection, ...rest } : { ...rest };\r\n         const store = new ctor(storeOptions);\r\n         embeddedData.stores.set(name, store);\r\n         return store;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Destroys and removes embedded collection stores. Invoking this method with no parameters destroys all stores.\r\n    * Invoking with an embedded name destroys all stores for that particular collection. If you provide an embedded and\r\n    * store name just that particular store is destroyed and removed.\r\n    *\r\n    * @param {string}   [embeddedName] - Specific embedded collection name.\r\n    *\r\n    * @param {string}   [storeName] - Specific store name.\r\n    *\r\n    * @returns {boolean} One or more stores destroyed?\r\n    */\r\n   destroy(embeddedName, storeName)\r\n   {\r\n      let count = 0;\r\n\r\n      // Destroy all embedded stores\r\n      if (embeddedName === void 0)\r\n      {\r\n         for (const embeddedData of this.#name.values())\r\n         {\r\n            embeddedData.collection = null;\r\n            for (const store of embeddedData.stores.values())\r\n            {\r\n               store.destroy();\r\n               count++;\r\n            }\r\n         }\r\n\r\n         this.#name.clear();\r\n      }\r\n      else if (typeof embeddedName === 'string' && storeName === void 0)\r\n      {\r\n         const embeddedData = this.#name.get(embeddedName);\r\n         if (embeddedData)\r\n         {\r\n            embeddedData.collection = null;\r\n            for (const store of embeddedData.stores.values())\r\n            {\r\n               store.destroy();\r\n               count++;\r\n            }\r\n         }\r\n\r\n         this.#name.delete(embeddedName);\r\n      }\r\n      else if (typeof embeddedName === 'string' && storeName === 'string')\r\n      {\r\n         const embeddedData = this.#name.get(embeddedName);\r\n         if (embeddedData)\r\n         {\r\n            const store = embeddedData.stores.get(storeName);\r\n            if (store)\r\n            {\r\n               store.destroy();\r\n               count++;\r\n            }\r\n         }\r\n      }\r\n\r\n      return count > 0;\r\n   }\r\n\r\n   /**\r\n    * @template T\r\n    *\r\n    * @param {string} embeddedName -\r\n    *\r\n    * @param {string} storeName -\r\n    *\r\n    * @returns {import('#svelte-fvtt/store/reducer').DynMapReducer<string, T>} DynMapReducer instance.\r\n    */\r\n   get(embeddedName, storeName)\r\n   {\r\n      if (!this.#name.has(embeddedName)) { return void 0; }\r\n\r\n      return this.#name.get(embeddedName).stores.get(storeName);\r\n   }\r\n\r\n   /**\r\n    * Updates all existing embedded collection stores with the associated embedded collection\r\n    */\r\n   handleDocChange()\r\n   {\r\n      const doc = this.#document[0];\r\n\r\n      if (doc instanceof globalThis.foundry.abstract.Document)\r\n      {\r\n         const existingEmbeddedNames = new Set(this.#name.keys());\r\n\r\n         /** @type {string[]} */\r\n         const embeddedNames = Object.keys(doc.constructor?.metadata?.embedded ?? []);\r\n\r\n         // Remove all previously stored embedded name CRUD keys.\r\n         this.#embeddedNames.clear();\r\n\r\n         for (const embeddedName of embeddedNames)\r\n         {\r\n            // Remove processed embedded name from existingEmbeddedNames set.\r\n            existingEmbeddedNames.delete(embeddedName);\r\n\r\n            // Update CRUD keys.\r\n            this.#embeddedNames.add(`create${embeddedName}`);\r\n            this.#embeddedNames.add(`delete${embeddedName}`);\r\n            this.#embeddedNames.add(`update${embeddedName}`);\r\n\r\n            let collection = null;\r\n\r\n            try\r\n            {\r\n               // Update any existing stores with the actual collection.\r\n               collection = doc.getEmbeddedCollection(embeddedName);\r\n            }\r\n            catch (err)\r\n            {\r\n               console.warn(`EmbeddedStoreManager.handleDocUpdate error: No valid embedded collection for: ${\r\n                embeddedName}`);\r\n            }\r\n\r\n            // Update EmbeddedData for new collection.\r\n            const embeddedData = this.#name.get(embeddedName);\r\n            if (embeddedData)\r\n            {\r\n               embeddedData.collection = collection;\r\n\r\n               // Update all existing stores.\r\n               for (const store of embeddedData.stores.values()) { store.setData(collection, true); }\r\n            }\r\n         }\r\n\r\n         // Update all existing embedded collections with null data that aren't processed above.\r\n         for (const embeddedName of existingEmbeddedNames)\r\n         {\r\n            const embeddedData = this.#name.get(embeddedName);\r\n            if (embeddedData)\r\n            {\r\n               embeddedData.collection = null;\r\n\r\n               for (const store of embeddedData.stores.values()) { store.setData(null, true); }\r\n            }\r\n         }\r\n      }\r\n      else // Reset all embedded reducer stores to null data.\r\n      {\r\n         this.#embeddedNames.clear();\r\n\r\n         for (const embeddedData of this.#name.values())\r\n         {\r\n            embeddedData.collection = null;\r\n\r\n            for (const store of embeddedData.stores.values()) { store.setData(null, true); }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Handles updates to embedded stores parsing the render context for valid embedded store types.\r\n    *\r\n    * On create, delete, update parse the type being modified then force index updates for the embedded type.\r\n    *\r\n    * @param {string}   renderContext - render context update from document.\r\n    */\r\n   handleUpdate(renderContext)\r\n   {\r\n      if (!this.#embeddedNames.has(renderContext)) { return; }\r\n\r\n      const match = EmbeddedStoreManager.#renderContextRegex.exec(renderContext);\r\n\r\n      if (match)\r\n      {\r\n         const embeddedName = match[2];\r\n         if (!this.#name.has(embeddedName)) { return; }\r\n\r\n         for (const store of this.#name.get(embeddedName).stores.values())\r\n         {\r\n            store.index.update(true);\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {object} EmbeddedCollectionData\r\n *\r\n * @property {foundry.abstract.Collection} collection -\r\n *\r\n * @property {Map<string, import('@typhonjs-fvtt/svelte/store').DynMapReducer<string, T>>} stores -\r\n */\r\n","import {\r\n   getUUIDFromDataTransfer,\r\n   isObject,\r\n   isPlainObject,\r\n   uuidv4 } from '#svelte-fvtt/util';\r\n\r\nimport { EmbeddedStoreManager } from './EmbeddedStoreManager.js';\r\n\r\n/**\r\n * Provides a wrapper implementing the Svelte store / subscriber protocol around any Document / ClientMixinDocument.\r\n * This makes documents reactive in a Svelte component, but otherwise provides subscriber functionality external to\r\n * Svelte.\r\n */\r\nexport class TJSDocument\r\n{\r\n   /**\r\n    * @type {foundry.abstract.Document[]}\r\n    */\r\n   #document = [void 0];\r\n\r\n   /**\r\n    * @type {EmbeddedStoreManager}\r\n    */\r\n   #embeddedStoreManager;\r\n   #embeddedAPI;\r\n\r\n   /**\r\n    * @type {string}\r\n    */\r\n   #uuidv4;\r\n\r\n   /**\r\n    * @type {TJSDocumentOptions}\r\n    */\r\n   #options = { delete: void 0, preDelete: void 0 };\r\n\r\n   #subscriptions = [];\r\n   #updateOptions;\r\n\r\n   /**\r\n    * @param {foundry.abstract.Document | TJSDocumentOptions}  [document] - Document to wrap or TJSDocumentOptions.\r\n    *\r\n    * @param {TJSDocumentOptions}      [options] - TJSDocument options.\r\n    */\r\n   constructor(document, options = {})\r\n   {\r\n      this.#uuidv4 = `tjs-document-${uuidv4()}`;\r\n\r\n      if (isPlainObject(document)) // Handle case when only options are passed into ctor.\r\n      {\r\n         this.setOptions(document);\r\n      }\r\n      else\r\n      {\r\n         this.setOptions(options);\r\n         this.set(document);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns {EmbeddedAPI} Embedded store manager.\r\n    */\r\n   get embedded()\r\n   {\r\n      if (!this.#embeddedAPI)\r\n      {\r\n         this.#embeddedStoreManager = new EmbeddedStoreManager(this.#document);\r\n         this.#embeddedAPI = {\r\n            create: (embeddedName, options) => this.#embeddedStoreManager.create(embeddedName, options),\r\n            destroy: (embeddedName, storeName) => this.#embeddedStoreManager.destroy(embeddedName, storeName),\r\n            get: (embeddedName, storeName) => this.#embeddedStoreManager.get(embeddedName, storeName)\r\n         };\r\n      }\r\n\r\n      return this.#embeddedAPI;\r\n   }\r\n\r\n   /**\r\n    * Returns the options passed on last update.\r\n    *\r\n    * @returns {object} Last update options.\r\n    */\r\n   get updateOptions() { return this.#updateOptions ?? {}; }\r\n\r\n   /**\r\n    * Returns the UUID assigned to this store.\r\n    *\r\n    * @returns {string} UUID\r\n    */\r\n   get uuidv4() { return this.#uuidv4; }\r\n\r\n   /**\r\n    * Handles cleanup when the document is deleted. Invoking any optional delete function set in the constructor.\r\n    *\r\n    * @returns {Promise<void>}\r\n    */\r\n   async #deleted()\r\n   {\r\n      const doc = this.#document[0];\r\n\r\n      // Check to see if the document is still in the associated collection to determine if actually deleted.\r\n      if (doc instanceof globalThis.foundry.abstract.Document && !doc?.collection?.has(doc.id))\r\n      {\r\n         delete doc?.apps[this.#uuidv4];\r\n         this.#setDocument(void 0);\r\n\r\n         if (typeof this.#options.preDelete === 'function')\r\n         {\r\n            await this.#options.preDelete(doc);\r\n         }\r\n\r\n         this.#updateSubscribers(false, { action: 'delete', data: void 0 });\r\n\r\n         if (typeof this.#options.delete === 'function')\r\n         {\r\n            await this.#options.delete(doc);\r\n         }\r\n\r\n         this.#updateOptions = void 0;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Completely removes all internal subscribers, any optional delete callback, and unregisters from the\r\n    * ClientDocumentMixin `apps` tracking object.\r\n    */\r\n   destroy()\r\n   {\r\n      const doc = this.#document[0];\r\n\r\n      if (this.#embeddedStoreManager)\r\n      {\r\n         this.#embeddedStoreManager.destroy();\r\n         this.#embeddedStoreManager = void 0;\r\n         this.#embeddedAPI = void 0;\r\n      }\r\n\r\n      if (doc instanceof globalThis.foundry.abstract.Document)\r\n      {\r\n         delete doc?.apps[this.#uuidv4];\r\n         this.#setDocument(void 0);\r\n      }\r\n\r\n      this.#options.delete = void 0;\r\n      this.#subscriptions.length = 0;\r\n   }\r\n\r\n   /**\r\n    * @param {boolean}  [force] - unused - signature from Foundry render function.\r\n    *\r\n    * @param {object}   [options] - Options from render call; will have document update context.\r\n    */\r\n   #updateSubscribers(force = false, options = {}) // eslint-disable-line no-unused-vars\r\n   {\r\n      this.#updateOptions = options;\r\n\r\n      const doc = this.#document[0];\r\n\r\n      for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) { this.#subscriptions[cntr](doc, options); }\r\n\r\n      if (this.#embeddedStoreManager)\r\n      {\r\n         this.#embeddedStoreManager.handleUpdate(options.renderContext);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns {foundry.abstract.Document | undefined} Current document\r\n    */\r\n   get() { return this.#document[0]; }\r\n\r\n   /**\r\n    * @param {foundry.abstract.Document | undefined}  document - New document to set.\r\n    *\r\n    * @param {object}         [options] - New document update options to set.\r\n    */\r\n   set(document, options = {})\r\n   {\r\n      if (this.#document[0])\r\n      {\r\n         delete this.#document[0].apps[this.#uuidv4];\r\n      }\r\n\r\n      if (document !== void 0 && !(document instanceof globalThis.foundry.abstract.Document))\r\n      {\r\n         throw new TypeError(`TJSDocument set error: 'document' is not a valid Document or undefined.`);\r\n      }\r\n\r\n      if (options === null || typeof options !== 'object')\r\n      {\r\n         throw new TypeError(`TJSDocument set error: 'options' is not an object.`);\r\n      }\r\n\r\n      if (document instanceof globalThis.foundry.abstract.Document)\r\n      {\r\n         document.apps[this.#uuidv4] = {\r\n            close: this.#deleted.bind(this),\r\n            render: this.#updateSubscribers.bind(this)\r\n         };\r\n      }\r\n\r\n      this.#setDocument(document);\r\n      this.#updateOptions = options;\r\n      this.#updateSubscribers();\r\n   }\r\n\r\n   /**\r\n    *\r\n    * @param {foundry.abstract.Document | undefined} doc -\r\n    */\r\n   #setDocument(doc)\r\n   {\r\n      this.#document[0] = doc;\r\n\r\n      if (this.#embeddedStoreManager) { this.#embeddedStoreManager.handleDocChange(); }\r\n   }\r\n\r\n   /**\r\n    * Potentially sets new document from data transfer object.\r\n    *\r\n    * @param {object}   data - Document transfer data.\r\n    *\r\n    * @param {import('@typhonjs-fvtt/svelte/util').ParseDataTransferOptions & TJSDocumentOptions}   [options] - Optional\r\n    *        parameters.\r\n    *\r\n    * @returns {Promise<boolean>} Returns true if new document set from data transfer blob.\r\n    */\r\n   async setFromDataTransfer(data, options)\r\n   {\r\n      return this.setFromUUID(getUUIDFromDataTransfer(data, options), options);\r\n   }\r\n\r\n   /**\r\n    * Sets the document by Foundry UUID performing a lookup and setting the document if found.\r\n    *\r\n    * @param {string}   uuid - A Foundry UUID to lookup.\r\n    *\r\n    * @param {TJSDocumentOptions}   [options] - New document update options to set.\r\n    *\r\n    * @returns {Promise<boolean>} True if successfully set document from UUID.\r\n    */\r\n   async setFromUUID(uuid, options = {})\r\n   {\r\n      if (typeof uuid !== 'string' || uuid.length === 0) { return false; }\r\n\r\n      try\r\n      {\r\n         const doc = await globalThis.fromUuid(uuid);\r\n\r\n         if (doc)\r\n         {\r\n            this.set(doc, options);\r\n            return true;\r\n         }\r\n      }\r\n      catch (err) { /**/ }\r\n\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * Sets options for this document wrapper / store.\r\n    *\r\n    * @param {TJSDocumentOptions}   options - Options for TJSDocument.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (!isObject(options))\r\n      {\r\n         throw new TypeError(`TJSDocument error: 'options' is not a plain object.`);\r\n      }\r\n\r\n      // Verify valid values -------------\r\n\r\n      if (options.delete !== void 0 && typeof options.delete !== 'function')\r\n      {\r\n         throw new TypeError(`TJSDocument error: 'delete' attribute in options is not a function.`);\r\n      }\r\n\r\n      if (options.preDelete !== void 0 && typeof options.preDelete !== 'function')\r\n      {\r\n         throw new TypeError(`TJSDocument error: 'preDelete' attribute in options is not a function.`);\r\n      }\r\n\r\n      // Set any valid values -------------\r\n\r\n      if (options.delete === void 0 || typeof options.delete === 'function')\r\n      {\r\n         this.#options.delete = options.delete;\r\n      }\r\n\r\n      if (options.preDelete === void 0 || typeof options.preDelete === 'function')\r\n      {\r\n         this.#options.preDelete = options.preDelete;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {function(foundry.abstract.Document, object): void} handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler);           // Add handler to the array of subscribers.\r\n\r\n      const updateOptions = { action: 'subscribe', data: void 0 };\r\n\r\n      handler(this.#document[0], updateOptions);      // Call handler with current value and update options.\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {object} TJSDocumentOptions\r\n *\r\n * @property {(doc: foundry.abstract.Document) => void} [delete] - Optional post delete function to invoke when\r\n *           document is deleted _after_ subscribers have been notified.\r\n *\r\n * @property {(doc: foundry.abstract.Document) => void} [preDelete] - Optional pre delete function to invoke when\r\n *           document is deleted _before_ subscribers are notified.\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {object} EmbeddedAPI\r\n *\r\n * @property {(embeddedName: string, options: import('#svelte-fvtt/store/reducer').DynOptionsMapCreate<string, any>) => import('#svelte-fvtt/store/reducer').DynMapReducer<string, T>} create - Creates an embedded collection store.\r\n *\r\n * @property {(embeddedName?: string, storeName?: string) => boolean} destroy - Destroys one or more embedded collection stores.\r\n *\r\n * @property {(embeddedName: string, storeName: string) => import('#svelte-fvtt/store/reducer').DynMapReducer<string, T>} get - Returns a specific existing embedded collection store.\r\n */\r\n","import {\r\n   isObject,\r\n   isPlainObject,\r\n   uuidv4 }       from '@typhonjs-fvtt/svelte/util';\r\n\r\n/**\r\n * Provides a wrapper implementing the Svelte store / subscriber protocol around any DocumentCollection. This makes\r\n * document collections reactive in a Svelte component, but otherwise provides subscriber functionality external to\r\n * Svelte.\r\n *\r\n * @template {globalThis.DocumentCollection} T\r\n */\r\nexport class TJSDocumentCollection\r\n{\r\n   #collection;\r\n   #collectionCallback;\r\n   #uuid;\r\n\r\n   /**\r\n    * @type {TJSDocumentCollectionOptions}\r\n    */\r\n   #options = { delete: void 0, preDelete: void 0 };\r\n\r\n   #subscriptions = [];\r\n   #updateOptions;\r\n\r\n   /**\r\n    * @param {T|TJSDocumentCollectionOptions}   [collection] - Collection to wrap or TJSDocumentCollectionOptions.\r\n    *\r\n    * @param {TJSDocumentCollectionOptions}     [options] - TJSDocumentCollection options.\r\n    */\r\n   constructor(collection, options = {})\r\n   {\r\n      this.#uuid = `tjs-collection-${uuidv4()}`;\r\n\r\n      if (isPlainObject(collection)) // Handle case when only options are passed into ctor.\r\n      {\r\n         this.setOptions(collection);\r\n      }\r\n      else\r\n      {\r\n         this.setOptions(options);\r\n         this.set(collection);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the options passed on last update.\r\n    *\r\n    * @returns {object} Last update options.\r\n    */\r\n   get updateOptions() { return this.#updateOptions ?? {}; }\r\n\r\n   /**\r\n    * Returns the UUID assigned to this store.\r\n    *\r\n    * @returns {*} UUID\r\n    */\r\n   get uuid() { return this.#uuid; }\r\n\r\n   /**\r\n    * Handles cleanup when the collection is deleted. Invoking any optional delete function set in the constructor.\r\n    *\r\n    * @returns {Promise<void>}\r\n    */\r\n   async #deleted()\r\n   {\r\n      const collection = this.#collection;\r\n\r\n      if (collection instanceof DocumentCollection)\r\n      {\r\n         const index = collection?.apps?.findIndex((sub) => sub === this.#collectionCallback);\r\n         if (index >= 0) { collection?.apps?.splice(index, 1); }\r\n\r\n         this.#collection = void 0;\r\n      }\r\n\r\n      if (typeof this.#options.preDelete === 'function')\r\n      {\r\n         await this.#options.preDelete(collection);\r\n      }\r\n\r\n      this.#notify(false, { action: 'delete', documentType: collection.documentName, documents: [], data: [] });\r\n\r\n      if (typeof this.#options.delete === 'function')\r\n      {\r\n         await this.#options.delete(collection);\r\n      }\r\n\r\n      this.#updateOptions = void 0;\r\n   }\r\n\r\n   /**\r\n    * Completely removes all internal subscribers, any optional delete callback, and unregisters from the\r\n    * DocumentCollection `apps` tracking array.\r\n    */\r\n   destroy()\r\n   {\r\n      const collection = this.#collection;\r\n\r\n      if (collection instanceof DocumentCollection)\r\n      {\r\n         const index = collection?.apps?.findIndex((sub) => sub === this.#collectionCallback);\r\n         if (index >= 0) { collection?.apps?.splice(index, 1); }\r\n\r\n         this.#collection = void 0;\r\n      }\r\n\r\n      this.#options.delete = void 0;\r\n      this.#subscriptions.length = 0;\r\n   }\r\n\r\n   /**\r\n    * @param {boolean}  [force] - unused - signature from Foundry render function.\r\n    *\r\n    * @param {object}   [options] - Options from render call; will have collection update context.\r\n    */\r\n   #notify(force = false, options = {}) // eslint-disable-line no-unused-vars\r\n   {\r\n      this.#updateOptions = options;\r\n\r\n      // Subscriptions are stored locally as on the browser Babel is still used for private class fields / Babel\r\n      // support until 2023. IE not doing this will require several extra method calls otherwise.\r\n      const subscriptions = this.#subscriptions;\r\n      const collection = this.#collection;\r\n\r\n      for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](collection, options); }\r\n   }\r\n\r\n   /**\r\n    * @returns {T | undefined} Current collection\r\n    */\r\n   get() { return this.#collection; }\r\n\r\n   /**\r\n    * @param {T | undefined}  collection - New collection to set.\r\n    *\r\n    * @param {object}         [options] - New collection update options to set.\r\n    */\r\n   set(collection, options = {})\r\n   {\r\n      if (this.#collection)\r\n      {\r\n         const index = this.#collection.apps.findIndex((sub) => sub === this.#collectionCallback);\r\n         if (index >= 0) { this.#collection.apps.splice(index, 1); }\r\n\r\n         this.#collectionCallback = void 0;\r\n      }\r\n\r\n      if (collection !== void 0 && !(collection instanceof DocumentCollection))\r\n      {\r\n         throw new TypeError(\r\n          `TJSDocumentCollection set error: 'collection' is not a valid DocumentCollection or undefined.`);\r\n      }\r\n\r\n      if (!isObject(options))\r\n      {\r\n         throw new TypeError(`TJSDocument set error: 'options' is not an object.`);\r\n      }\r\n\r\n      if (collection instanceof DocumentCollection)\r\n      {\r\n         this.#collectionCallback = {\r\n            close: this.#deleted.bind(this),\r\n            render: this.#notify.bind(this)\r\n         };\r\n\r\n         collection?.apps?.push(this.#collectionCallback);\r\n      }\r\n\r\n      this.#collection = collection;\r\n      this.#updateOptions = options;\r\n      this.#notify();\r\n   }\r\n\r\n   /**\r\n    * Sets options for this collection wrapper / store.\r\n    *\r\n    * @param {TJSDocumentCollectionOptions}   options - Options for TJSDocumentCollection.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (!isObject(options))\r\n      {\r\n         throw new TypeError(`TJSDocumentCollection error: 'options' is not an object.`);\r\n      }\r\n\r\n      // Verify valid values -------------\r\n\r\n      if (options.delete !== void 0 && typeof options.delete !== 'function')\r\n      {\r\n         throw new TypeError(`TJSDocumentCollection error: 'delete' attribute in options is not a function.`);\r\n      }\r\n\r\n      if (options.preDelete !== void 0 && typeof options.preDelete !== 'function')\r\n      {\r\n         throw new TypeError(`TJSDocumentCollection error: 'preDelete' attribute in options is not a function.`);\r\n      }\r\n\r\n      // Set any valid values -------------\r\n\r\n      if (options.delete === void 0 || typeof options.delete === 'function')\r\n      {\r\n         this.#options.delete = options.delete;\r\n      }\r\n\r\n      if (options.preDelete === void 0 || typeof options.preDelete === 'function')\r\n      {\r\n         this.#options.preDelete = options.preDelete;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {function(T, object): void} handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler);              // Add handler to the array of subscribers.\r\n\r\n      const collection = this.#collection;\r\n\r\n      const documentType = collection?.documentName ?? void 0;\r\n\r\n      const updateOptions = { action: 'subscribe', documentType, documents: [], data: [] };\r\n\r\n      handler(collection, updateOptions);  // Call handler with current value and update options.\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef TJSDocumentCollectionOptions\r\n *\r\n * @property {(collection: globalThis.DocumentCollection) => void} [delete] - Optional post delete function\r\n *           to invoke when document is deleted _after_ subscribers have been notified.\r\n *\r\n * @property {(collection: globalThis.DocumentCollection) => void} [preDelete] - Optional pre delete function to\r\n *           invoke when document is deleted _before_ subscribers are notified.\r\n */\r\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}