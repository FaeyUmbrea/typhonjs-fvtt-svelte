{"version":3,"file":"index.js","sources":["../../../../../typhonjs-svelte/lib/_dist/util/index.js","../../../../../typhonjs-svelte/lib/_dist/store/dom/index.js"],"sourcesContent":["import { group_outros, transition_out, check_outros } from 'svelte/internal';\n\n/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n */\nconst s_TAG_OBJECT = '[object Object]';\n/**\n * Recursively deep merges all source objects into the target object in place. Like `Object.assign` if you provide `{}`\n * as the target a copy is produced. If the target and source property are object literals they are merged.\n * Deleting keys is supported by specifying a property starting with `-=`.\n *\n * @param {object}      target - Target object.\n *\n * @param {...object}   sourceObj - One or more source objects.\n *\n * @returns {object}    Target object.\n */\nfunction deepMerge(target = {}, ...sourceObj) {\n    if (Object.prototype.toString.call(target) !== s_TAG_OBJECT) {\n        throw new TypeError(`deepMerge error: 'target' is not an 'object'.`);\n    }\n    for (let cntr = 0; cntr < sourceObj.length; cntr++) {\n        if (Object.prototype.toString.call(sourceObj[cntr]) !== s_TAG_OBJECT) {\n            throw new TypeError(`deepMerge error: 'sourceObj[${cntr}]' is not an 'object'.`);\n        }\n    }\n    return _deepMerge(target, ...sourceObj);\n}\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {unknown} value - Any value.\n *\n * @returns {boolean} Whether value is async iterable.\n */\nfunction isAsyncIterable(value) {\n    if (typeof value !== 'object' || value === null || value === void 0) {\n        return false;\n    }\n    return Symbol.asyncIterator in value;\n}\n/**\n * Tests for whether an object is iterable.\n *\n * @param {unknown} value - Any value.\n *\n * @returns {boolean} Whether object is iterable.\n */\nfunction isIterable(value) {\n    if (value === null || value === void 0 || typeof value !== 'object') {\n        return false;\n    }\n    return Symbol.iterator in value;\n}\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {unknown} value - Any value.\n *\n * @returns {boolean} Is it an object.\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n/**\n * Tests for whether the given value is a plain object.\n *\n * An object is plain if it is created by either: `{}`, `new Object()` or `Object.create(null)`.\n *\n * @param {unknown} value - Any value\n *\n * @returns {boolean} Is it a plain object.\n */\nfunction isPlainObject(value) {\n    if (Object.prototype.toString.call(value) !== s_TAG_OBJECT) {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access with keys separated by `.`.\n *\n * @param {any}      [defaultValue] - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nfunction safeAccess(data, accessor, defaultValue) {\n    if (typeof data !== 'object') {\n        return defaultValue;\n    }\n    if (typeof accessor !== 'string') {\n        return defaultValue;\n    }\n    const access = accessor.split('.');\n    // Walk through the given object by the accessor indexes.\n    for (let cntr = 0; cntr < access.length; cntr++) {\n        // If the next level of object access is undefined or null then return the empty string.\n        if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) {\n            return defaultValue;\n        }\n        data = data[access[cntr]];\n    }\n    return data;\n}\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {any}      value - A new value to set if an entry for accessor is found.\n *\n * @param {SafeSetOperation}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *        'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *        automatically.\n *\n * @returns {boolean} True if successful.\n */\nfunction safeSet(data, accessor, value, operation = 'set', createMissing = true) {\n    if (typeof data !== 'object') {\n        throw new TypeError(`safeSet Error: 'data' is not an 'object'.`);\n    }\n    if (typeof accessor !== 'string') {\n        throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`);\n    }\n    const access = accessor.split('.');\n    // Walk through the given object by the accessor indexes.\n    for (let cntr = 0; cntr < access.length; cntr++) {\n        // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n        if (Array.isArray(data)) {\n            const number = (+access[cntr]);\n            if (!Number.isInteger(number) || number < 0) {\n                return false;\n            }\n        }\n        if (cntr === access.length - 1) {\n            switch (operation) {\n                case 'add':\n                    data[access[cntr]] += value;\n                    break;\n                case 'div':\n                    data[access[cntr]] /= value;\n                    break;\n                case 'mult':\n                    data[access[cntr]] *= value;\n                    break;\n                case 'set':\n                    data[access[cntr]] = value;\n                    break;\n                case 'set-undefined':\n                    if (typeof data[access[cntr]] === 'undefined') {\n                        data[access[cntr]] = value;\n                    }\n                    break;\n                case 'sub':\n                    data[access[cntr]] -= value;\n                    break;\n            }\n        }\n        else {\n            // If createMissing is true and the next level of object access is undefined then create a new object entry.\n            if (createMissing && typeof data[access[cntr]] === 'undefined') {\n                data[access[cntr]] = {};\n            }\n            // Abort if the next level is null or not an object and containing a value.\n            if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') {\n                return false;\n            }\n            data = data[access[cntr]];\n        }\n    }\n    return true;\n}\n/**\n * Internal implementation for `deepMerge`.\n *\n * @param {object}      target - Target object.\n *\n * @param {...object}   sourceObj - One or more source objects.\n *\n * @returns {object}    Target object.\n */\nfunction _deepMerge(target = {}, ...sourceObj) {\n    // Iterate and merge all source objects into target.\n    for (let cntr = 0; cntr < sourceObj.length; cntr++) {\n        const obj = sourceObj[cntr];\n        for (const prop in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n                // Handle the special property starting with '-=' to delete keys.\n                if (prop.startsWith('-=')) {\n                    delete target[prop.slice(2)];\n                    continue;\n                }\n                // If target already has prop and both target[prop] and obj[prop] are object literals then merge them\n                // otherwise assign obj[prop] to target[prop].\n                target[prop] = Object.prototype.hasOwnProperty.call(target, prop) && target[prop]?.constructor === Object &&\n                    obj[prop]?.constructor === Object ? _deepMerge({}, target[prop], obj[prop]) : obj[prop];\n            }\n        }\n    }\n    return target;\n}\n\n/**\r\n * Provides several helpful utility methods for accessibility and keyboard navigation.\r\n */\r\nclass A11yHelper\r\n{\r\n   /**\r\n    * Apply focus to the HTMLElement targets in a given A11yFocusSource data object. An iterable list `options.focusEl`\r\n    * can contain HTMLElements or selector strings. If multiple focus targets are provided in a list then the first\r\n    * valid target found will be focused. If focus target is a string then a lookup via `document.querySelector` is\r\n    * performed. In this case you should provide a unique selector for the desired focus target.\r\n    *\r\n    * Note: The body of this method is postponed to the next clock tick to allow any changes in the DOM to occur that\r\n    * might alter focus targets before applying.\r\n    *\r\n    * @param {A11yFocusSource|{ focusSource: A11yFocusSource }}   options - The focus options instance to apply.\r\n    */\r\n   static applyFocusSource(options)\r\n   {\r\n      if (!isObject(options)) { return; }\r\n\r\n      // Handle the case of receiving an object with embedded `focusSource`.\r\n      const focusOpts = isObject(options?.focusSource) ? options.focusSource : options;\r\n\r\n      setTimeout(() =>\r\n      {\r\n         const debug = typeof focusOpts.debug === 'boolean' ? focusOpts.debug : false;\r\n\r\n         if (isIterable(focusOpts.focusEl))\r\n         {\r\n            if (debug)\r\n            {\r\n               console.debug(`A11yHelper.applyFocusSource debug - Attempting to apply focus target: `, focusOpts.focusEl);\r\n            }\r\n\r\n            for (const target of focusOpts.focusEl)\r\n            {\r\n               if (target instanceof HTMLElement && target.isConnected)\r\n               {\r\n                  target.focus();\r\n                  if (debug)\r\n                  {\r\n                     console.debug(`A11yHelper.applyFocusSource debug - Applied focus to target: `, target);\r\n                  }\r\n                  break;\r\n               }\r\n               else if (typeof target === 'string')\r\n               {\r\n                  const element = document.querySelector(target);\r\n                  if (element instanceof HTMLElement && element.isConnected)\r\n                  {\r\n                     element.focus();\r\n                     if (debug)\r\n                     {\r\n                        console.debug(`A11yHelper.applyFocusSource debug - Applied focus to target: `, element);\r\n                     }\r\n                     break;\r\n                  }\r\n                  else if (debug)\r\n                  {\r\n                     console.debug(`A11yHelper.applyFocusSource debug - Could not query selector: `, target);\r\n                  }\r\n               }\r\n            }\r\n         }\r\n         else if (debug)\r\n         {\r\n            console.debug(`A11yHelper.applyFocusSource debug - No focus targets defined.`);\r\n         }\r\n      }, 0);\r\n   }\r\n\r\n   /**\r\n    * Returns first focusable element within a specified element.\r\n    *\r\n    * @param {HTMLElement|Document} [element=document] - Optional element to start query.\r\n    *\r\n    * @param {object} [options] - Optional parameters.\r\n    *\r\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\r\n    *\r\n    * @param {Set<HTMLElement>} [options.ignoreElements] - Set of elements to ignore.\r\n    *\r\n    * @returns {HTMLElement} First focusable child element\r\n    */\r\n   static getFirstFocusableElement(element = document, options)\r\n   {\r\n      const focusableElements = this.getFocusableElements(element, options);\r\n\r\n      return focusableElements.length > 0 ? focusableElements[0] : void 0;\r\n   }\r\n\r\n   /**\r\n    * Returns all focusable elements within a specified element.\r\n    *\r\n    * @param {HTMLElement|Document} [element=document] Optional element to start query.\r\n    *\r\n    * @param {object}            [options] - Optional parameters.\r\n    *\r\n    * @param {boolean}           [options.anchorHref=true] - When true anchors must have an HREF.\r\n    *\r\n    * @param {Iterable<string>}  [options.ignoreClasses] - Iterable list of classes to ignore elements.\r\n    *\r\n    * @param {Set<HTMLElement>}  [options.ignoreElements] - Set of elements to ignore.\r\n    *\r\n    * @param {string}            [options.selectors] - Custom list of focusable selectors for `querySelectorAll`.\r\n    *\r\n    * @returns {Array<HTMLElement>} Child keyboard focusable\r\n    */\r\n   static getFocusableElements(element = document, { anchorHref = true, ignoreClasses, ignoreElements, selectors } = {})\r\n   {\r\n      if (!(element instanceof HTMLElement) && !(element instanceof Document))\r\n      {\r\n         throw new TypeError(`'element' is not a HTMLElement or Document instance.`);\r\n      }\r\n\r\n      if (typeof anchorHref !== 'boolean')\r\n      {\r\n         throw new TypeError(`'anchorHref' is not a boolean.`);\r\n      }\r\n\r\n      if (ignoreClasses !== void 0 && !isIterable(ignoreClasses))\r\n      {\r\n         throw new TypeError(`'ignoreClasses' is not an iterable list.`);\r\n      }\r\n\r\n      if (ignoreElements !== void 0 && !(ignoreElements instanceof Set))\r\n      {\r\n         throw new TypeError(`'ignoreElements' is not a Set.`);\r\n      }\r\n\r\n      if (selectors !== void 0 && typeof selectors !== 'string')\r\n      {\r\n         throw new TypeError(`'selectors' is not a string.`);\r\n      }\r\n\r\n      const selectorQuery = selectors ?? this.#getFocusableSelectors(anchorHref);\r\n\r\n      const allElements = [...element.querySelectorAll(selectorQuery)];\r\n\r\n      if (ignoreElements && ignoreClasses)\r\n      {\r\n         return allElements.filter((el) =>\r\n         {\r\n            let hasIgnoreClass = false;\r\n            for (const ignoreClass of ignoreClasses)\r\n            {\r\n               if (el.classList.contains(ignoreClass))\r\n               {\r\n                  hasIgnoreClass = true;\r\n                  break;\r\n               }\r\n            }\r\n\r\n            return !hasIgnoreClass && !ignoreElements.has(el) && el.style.display !== 'none' &&\r\n             el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') && !el.hasAttribute('inert') &&\r\n              el.getAttribute('aria-hidden') !== 'true';\r\n         });\r\n      }\r\n      else if (ignoreClasses)\r\n      {\r\n         return allElements.filter((el) =>\r\n         {\r\n            let hasIgnoreClass = false;\r\n            for (const ignoreClass of ignoreClasses)\r\n            {\r\n               if (el.classList.contains(ignoreClass))\r\n               {\r\n                  hasIgnoreClass = true;\r\n                  break;\r\n               }\r\n            }\r\n\r\n            return !hasIgnoreClass && el.style.display !== 'none' && el.style.visibility !== 'hidden' &&\r\n             !el.hasAttribute('disabled') && !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\r\n         });\r\n      }\r\n      else if (ignoreElements)\r\n      {\r\n         return allElements.filter((el) =>\r\n         {\r\n            return !ignoreElements.has(el) && el.style.display !== 'none' && el.style.visibility !== 'hidden' &&\r\n             !el.hasAttribute('disabled') && !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\r\n         });\r\n      }\r\n      else\r\n      {\r\n         return allElements.filter((el) =>\r\n         {\r\n            return el.style.display !== 'none' && el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') &&\r\n             !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the default focusable selectors query.\r\n    *\r\n    * @param {boolean}  [anchorHref=true] - When true anchors must have an HREF.\r\n    *\r\n    * @returns {string} Focusable selectors for `querySelectorAll`.\r\n    */\r\n   static #getFocusableSelectors(anchorHref = true)\r\n   {\r\n      return `button, [contenteditable=\"\"], [contenteditable=\"true\"], details summary:not([tabindex=\"-1\"]), embed, a${\r\n       anchorHref ? '[href]' : ''}, iframe, object, input:not([type=hidden]), select, textarea, ` +\r\n        `[tabindex]:not([tabindex=\"-1\"])`;\r\n   }\r\n\r\n   /**\r\n    * Gets a A11yFocusSource object from the given DOM event allowing for optional X / Y screen space overrides.\r\n    * Browsers (Firefox / Chrome) forwards a mouse event for the context menu keyboard button. Provides detection of\r\n    * when the context menu event is from the keyboard. Firefox as of (1/23) does not provide the correct screen space\r\n    * coordinates, so for keyboard context menu presses coordinates are generated from the centroid point of the\r\n    * element.\r\n    *\r\n    * A default fallback element or selector string may be provided to provide the focus target. If the event comes from\r\n    * the keyboard however the source focused element is inserted as the target with the fallback value appended to the\r\n    * list of focus targets. When A11yFocusSource is applied by {@link A11yHelper.applyFocusSource} the target focus\r\n    * list is iterated through until a connected target is found and focus applied.\r\n    *\r\n    * @param {object} options - Options\r\n    *\r\n    * @param {KeyboardEvent|MouseEvent}   [options.event] - The source DOM event.\r\n    *\r\n    * @param {boolean} [options.debug] - When true {@link A11yHelper.applyFocusSource} logs focus target data.\r\n    *\r\n    * @param {HTMLElement|string} [options.focusEl] - A specific HTMLElement or selector string as the focus target.\r\n    *\r\n    * @param {number}   [options.x] - Used when an event isn't provided; integer of event source in screen space.\r\n    *\r\n    * @param {number}   [options.y] - Used when an event isn't provided; integer of event source in screen space.\r\n    *\r\n    * @returns {A11yFocusSource} A A11yFocusSource object.\r\n    *\r\n    * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1426671\r\n    * @see https://bugzilla.mozilla.org/show_bug.cgi?id=314314\r\n    *\r\n    * TODO: Evaluate / test against touch input devices.\r\n    */\r\n   static getFocusSource({ event, x, y, focusEl, debug = false })\r\n   {\r\n      if (focusEl !== void 0 && !(focusEl instanceof HTMLElement) && typeof focusEl !== 'string')\r\n      {\r\n         throw new TypeError(\r\n          `A11yHelper.getFocusSource error: 'focusEl' is not a HTMLElement or string.`);\r\n      }\r\n\r\n      if (debug !== void 0 && typeof debug !== 'boolean')\r\n      {\r\n         throw new TypeError(`A11yHelper.getFocusSource error: 'debug' is not a boolean.`);\r\n      }\r\n\r\n      // Handle the case when no event is provided and x, y, or focusEl is explicitly defined.\r\n      if (event === void 0)\r\n      {\r\n         if (typeof x !== 'number')\r\n         {\r\n            throw new TypeError(`A11yHelper.getFocusSource error: 'event' not defined and 'x' is not a number.`);\r\n         }\r\n\r\n         if (typeof y !== 'number')\r\n         {\r\n            throw new TypeError(`A11yHelper.getFocusSource error: 'event' not defined and 'y' is not a number.`);\r\n         }\r\n\r\n         return {\r\n            debug,\r\n            focusEl: focusEl !== void 0 ? [focusEl] : void 0,\r\n            x,\r\n            y,\r\n         };\r\n      }\r\n\r\n      if (!(event instanceof KeyboardEvent) && !(event instanceof MouseEvent))\r\n      {\r\n         throw new TypeError(`A11yHelper.getFocusSource error: 'event' is not a KeyboardEvent or MouseEvent.`);\r\n      }\r\n\r\n      if (x !== void 0 && !Number.isInteger(x))\r\n      {\r\n         throw new TypeError(`A11yHelper.getFocusSource error: 'x' is not a number.`);\r\n      }\r\n\r\n      if (y !== void 0 && !Number.isInteger(y))\r\n      {\r\n         throw new TypeError(`A11yHelper.getFocusSource error: 'y' is not a number.`);\r\n      }\r\n\r\n      /** @type {HTMLElement} */\r\n      const targetEl = event.target;\r\n\r\n      if (!(targetEl instanceof HTMLElement))\r\n      {\r\n         throw new TypeError(`A11yHelper.getFocusSource error: 'event.target' is not an HTMLElement.`);\r\n      }\r\n\r\n      const result = { debug };\r\n\r\n      if (event instanceof MouseEvent)\r\n      {\r\n         // Firefox currently (1/23) does not correctly determine the location of a keyboard originated\r\n         // context menu location, so calculate position from middle of the event target.\r\n         // Firefox fires a mouse event for the context menu key.\r\n         if (event?.button !== 2 && event.type === 'contextmenu')\r\n         {\r\n            const rect = targetEl.getBoundingClientRect();\r\n            result.x = x ?? rect.left + (rect.width / 2);\r\n            result.y = y ?? rect.top + (rect.height / 2);\r\n            result.focusEl = focusEl !== void 0 ? [targetEl, focusEl] : [targetEl];\r\n            result.source = 'keyboard';\r\n         }\r\n         else\r\n         {\r\n            result.x = x ?? event.pageX;\r\n            result.y = y ?? event.pageY;\r\n            result.focusEl = focusEl !== void 0 ? [focusEl] : void 0;\r\n         }\r\n      }\r\n      else\r\n      {\r\n         const rect = targetEl.getBoundingClientRect();\r\n         result.x = x ?? rect.left + (rect.width / 2);\r\n         result.y = y ?? rect.top + (rect.height / 2);\r\n         result.focusEl = focusEl !== void 0 ? [targetEl, focusEl] : [targetEl];\r\n         result.source = 'keyboard';\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Returns first focusable element within a specified element.\r\n    *\r\n    * @param {HTMLElement|Document} [element=document] - Optional element to start query.\r\n    *\r\n    * @param {object} [options] - Optional parameters.\r\n    *\r\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\r\n    *\r\n    * @param {Set<HTMLElement>} [options.ignoreElements] - Set of elements to ignore.\r\n    *\r\n    * @returns {HTMLElement} First focusable child element\r\n    */\r\n   static getLastFocusableElement(element = document, options)\r\n   {\r\n      const focusableElements = this.getFocusableElements(element, options);\r\n\r\n      return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : void 0;\r\n   }\r\n\r\n   /**\r\n    * Tests if the given element is focusable.\r\n    *\r\n    * @param {HTMLElement} [el] - Element to test.\r\n    *\r\n    * @param {object} [options] - Optional parameters.\r\n    *\r\n    * @param {boolean} [options.anchorHref=true] - When true anchors must have an HREF.\r\n    *\r\n    * @param {Iterable<string>} [options.ignoreClasses] - Iterable list of classes to ignore elements.\r\n    *\r\n    * @returns {boolean} Element is focusable.\r\n    */\r\n   static isFocusable(el, { anchorHref = true, ignoreClasses } = {})\r\n   {\r\n      if (el === void 0 || el === null || !(el instanceof HTMLElement) || el?.hidden || !el?.isConnected)\r\n      {\r\n         return false;\r\n      }\r\n\r\n      if (typeof anchorHref !== 'boolean')\r\n      {\r\n         throw new TypeError(`'anchorHref' is not a boolean.`);\r\n      }\r\n\r\n      if (ignoreClasses !== void 0 && !isIterable(ignoreClasses))\r\n      {\r\n         throw new TypeError(`'ignoreClasses' is not an iterable list.`);\r\n      }\r\n\r\n      const contenteditableAttr = el.getAttribute('contenteditable');\r\n      const contenteditableFocusable = typeof contenteditableAttr === 'string' &&\r\n       (contenteditableAttr === '' || contenteditableAttr === 'true');\r\n\r\n      const tabindexAttr = el.getAttribute('tabindex');\r\n      const tabindexFocusable = typeof tabindexAttr === 'string' && tabindexAttr !== '-1';\r\n\r\n      const isAnchor = el instanceof HTMLAnchorElement;\r\n\r\n      if (contenteditableFocusable || tabindexFocusable || isAnchor || el instanceof HTMLButtonElement ||\r\n       el instanceof HTMLDetailsElement || el instanceof HTMLEmbedElement || el instanceof HTMLIFrameElement ||\r\n        el instanceof HTMLInputElement || el instanceof HTMLObjectElement || el instanceof HTMLSelectElement ||\r\n         el instanceof HTMLTextAreaElement)\r\n      {\r\n         if (isAnchor && anchorHref && typeof el.getAttribute('href') !== 'string')\r\n         {\r\n            return false;\r\n         }\r\n\r\n         return el.style.display !== 'none' && el.style.visibility !== 'hidden' && !el.hasAttribute('disabled') &&\r\n          !el.hasAttribute('inert') && el.getAttribute('aria-hidden') !== 'true';\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * Convenience method to check if the given data is a valid focus source.\r\n    *\r\n    * @param {HTMLElement|string}   data - Either an HTMLElement or selector string.\r\n    *\r\n    * @returns {boolean} Is valid focus source.\r\n    */\r\n   static isFocusSource(data)\r\n   {\r\n      return data instanceof HTMLElement || typeof data === 'string';\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {object} A11yFocusSource - Provides essential data to return focus to an HTMLElement after a series of UI\r\n * actions like working with context menus and modal dialogs.\r\n *\r\n * @property {boolean} [debug] - When true logs to console the actions taken in {@link A11yHelper.applyFocusSource}.\r\n *\r\n * @property {Iterable<HTMLElement|string>} [focusEl] - List of targets to attempt to focus.\r\n *\r\n * @property {string} [source] - The source of the event: 'keyboard' for instance.\r\n *\r\n * @property {number} [x] - Potential X coordinate of initial event.\r\n *\r\n * @property {number} [y] - Potential Y coordinate of initial event.\r\n */\n\n/**\r\n * Provides management of a single Promise that can be shared and accessed across JS & Svelte components. This allows a\r\n * Promise to be created and managed as part of the TRL application lifecycle and accessed safely in various control\r\n * flow scenarios. When resolution of the current managed Promise starts further interaction is prevented.\r\n *\r\n * Note: to enable debugging / log statements set the static `logging` variable to true.\r\n */\r\nclass ManagedPromise\r\n{\r\n   /** @type {boolean} */\r\n   static #logging = false;\r\n\r\n   /** @type {{ isProcessing?: boolean, promise?: Promise, reject: Function, resolve: Function }} */\r\n   #current;\r\n\r\n   /**\r\n    * @returns {boolean} Whether global logging is enabled.\r\n    */\r\n   static get logging()\r\n   {\r\n      return this.#logging;\r\n   }\r\n\r\n   /**\r\n    * @returns {boolean} Whether there is an active managed Promise.\r\n    */\r\n   get isActive()\r\n   {\r\n      return this.#current !== void 0;\r\n   }\r\n\r\n   /**\r\n    * @returns {boolean} Whether there is an active managed Promise and resolution is currently being processed.\r\n    */\r\n   get isProcessing()\r\n   {\r\n      return this.#current !== void 0 ? this.#current.isProcessing : false;\r\n   }\r\n\r\n   /**\r\n    * Sets global logging enabled state.\r\n    *\r\n    * @param {boolean}  logging - New logging enabled state.\r\n    */\r\n   static set logging(logging)\r\n   {\r\n      if (typeof logging !== 'boolean')\r\n      {\r\n         throw new TypeError(`[TRL] ManagedPromise.logging error: 'logging' is not a boolean.`);\r\n      }\r\n\r\n      this.#logging = logging;\r\n   }\r\n\r\n   // ----------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Resolves any current Promise with undefined and creates a new current Promise.\r\n    *\r\n    * @template T\r\n    *\r\n    * @param {object} opts - Options.\r\n    *\r\n    * @param {boolean}  [opts.reuse=false] - When true if there is an existing live Promise it is returned immediately.\r\n    *\r\n    * @returns {Promise<T>} The new current managed Promise.\r\n    */\r\n   create({ reuse = false } = {})\r\n   {\r\n      if (typeof reuse !== 'boolean')\r\n      {\r\n         throw new TypeError(`[TRL] ManagedPromise.create error: 'reuse' is not a boolean.`);\r\n      }\r\n\r\n      if (reuse && this.#current !== void 0 && this.#current.promise instanceof Promise)\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(`[TRL] ManagedPromise.create info: Reusing / returning existing managed Promise.`);\r\n         }\r\n\r\n         return this.#current.promise;\r\n      }\r\n\r\n      if (this.#current !== void 0)\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(\r\n             `[TRL] ManagedPromise.create info: Creating a new Promise and resolving existing immediately.`);\r\n         }\r\n\r\n         this.#current.resolve(void 0);\r\n         this.#current = void 0;\r\n      }\r\n\r\n      const promise = new Promise((resolve, reject) =>\r\n      {\r\n         this.#current = {\r\n            isProcessing: false,\r\n            reject,\r\n            resolve\r\n         };\r\n      });\r\n\r\n      this.#current.promise = promise;\r\n\r\n      return promise;\r\n   }\r\n\r\n   /**\r\n    * Gets the current Promise if any.\r\n    *\r\n    * @returns {Promise<any>} Current Promise.\r\n    */\r\n   get()\r\n   {\r\n      return this.#current ? this.#current.promise : void 0;\r\n   }\r\n\r\n   /**\r\n    * Rejects the current Promise if applicable.\r\n    *\r\n    * @param {*}  [result] - Result to reject.\r\n    *\r\n    * @returns {boolean} Was the promise rejected.\r\n    */\r\n   reject(result = void 0)\r\n   {\r\n      // Early out as Promise resolution is currently processing.\r\n      if (this.#current !== void 0 && this.#current.isProcessing)\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(`[TRL] ManagedPromise.reject info: Currently processing promise.`);\r\n         }\r\n\r\n         return true;\r\n      }\r\n\r\n      if (this.#current !== void 0)\r\n      {\r\n         this.#current.isProcessing = true;\r\n\r\n         if (result instanceof Promise)\r\n         {\r\n            result.then((value) =>\r\n            {\r\n               this.#current.reject(value);\r\n               this.#current = void 0;\r\n            }).catch((err) =>\r\n            {\r\n               this.#current.reject(err);\r\n               this.#current = void 0;\r\n            });\r\n         }\r\n         else\r\n         {\r\n            this.#current.reject(result);\r\n            this.#current = void 0;\r\n         }\r\n\r\n         return true;\r\n      }\r\n      else\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(`[TRL] ManagedPromise.reject warning: No current managed Promise to reject.`);\r\n         }\r\n\r\n         return false;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Resolves the current Promise if applicable.\r\n    *\r\n    * @param {*}  [result] - Result to resolve.\r\n    *\r\n    * @returns {boolean} Was the promise resolved.\r\n    */\r\n   resolve(result = void 0)\r\n   {\r\n      // Early out as Promise resolution is currently processing.\r\n      if (this.#current !== void 0 && this.#current.isProcessing)\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(`[TRL] ManagedPromise.resolve info: Currently processing promise.`);\r\n         }\r\n\r\n         return true;\r\n      }\r\n\r\n      if (this.#current !== void 0)\r\n      {\r\n         if (result instanceof Promise)\r\n         {\r\n            this.#current.isProcessing = true;\r\n\r\n            result.then((value) =>\r\n            {\r\n               this.#current.resolve(value);\r\n               this.#current = void 0;\r\n            }).catch((err) =>\r\n            {\r\n               this.#current.reject(err);\r\n               this.#current = void 0;\r\n            });\r\n         }\r\n         else\r\n         {\r\n            this.#current.resolve(result);\r\n            this.#current = void 0;\r\n         }\r\n\r\n         return true;\r\n      }\r\n      else\r\n      {\r\n         if (ManagedPromise.#logging)\r\n         {\r\n            console.warn(`[TRL] ManagedPromise.resolve warning: No current managed Promise to resolve.`);\r\n         }\r\n\r\n         return false;\r\n      }\r\n   }\r\n}\n\n/**\r\n * Provides utility methods for checking browser capabilities.\r\n *\r\n * @see https://kilianvalkhof.com/2021/web/detecting-media-query-support-in-css-and-javascript/\r\n * TODO: perhaps add support for various standard media query checks for level 4 & 5.\r\n */\r\nclass BrowserSupports\r\n{\r\n   /**\r\n    * Check for container query support.\r\n    *\r\n    * @returns {boolean} True if container queries supported.\r\n    */\r\n   static get containerQueries()\r\n   {\r\n      return 'container' in document.documentElement.style;\r\n   }\r\n}\n\n/**\r\n * Provides access to the Clipboard API for reading / writing text strings. This requires a secure context.\r\n *\r\n * Note: `writeText` will attempt to use the older `execCommand` if available when `navigator.clipboard` is not\r\n * available.\r\n */\r\nclass ClipboardAccess\r\n{\r\n   /**\r\n    * Uses `navigator.clipboard` if available to read text from the clipboard.\r\n    *\r\n    * Note: Always returns `undefined` when `navigator.clipboard` is not available or the clipboard contains the\r\n    * empty string.\r\n    *\r\n    * @returns {Promise<string|undefined>} The current clipboard text or undefined.\r\n    */\r\n   static async readText()\r\n   {\r\n      let result;\r\n\r\n      if (globalThis?.navigator?.clipboard)\r\n      {\r\n         try\r\n         {\r\n            result = await globalThis.navigator.clipboard.readText();\r\n         }\r\n         catch (err) { /**/ }\r\n      }\r\n\r\n      return result === '' ? void 0 : result;\r\n   }\r\n\r\n   /**\r\n    * Uses `navigator.clipboard` if available then falls back to `document.execCommand('copy')` if available to copy\r\n    * the given text to the clipboard.\r\n    *\r\n    * @param {string}   text - Text to copy to the browser clipboard.\r\n    *\r\n    * @returns {Promise<boolean>} Copy successful.\r\n    */\r\n   static async writeText(text)\r\n   {\r\n      if (typeof text !== 'string')\r\n      {\r\n         throw new TypeError(`ClipboardAccess.writeText error: 'text' is not a string.`);\r\n      }\r\n\r\n      let success = false;\r\n\r\n      if (globalThis?.navigator?.clipboard)\r\n      {\r\n         try\r\n         {\r\n            await globalThis.navigator.clipboard.writeText(text);\r\n            success = true;\r\n         }\r\n         catch (err) { /**/ }\r\n      }\r\n      else if (globalThis?.document?.execCommand instanceof Function)\r\n      {\r\n         const textArea = globalThis.document.createElement('textarea');\r\n\r\n         // Place in the top-left corner of screen regardless of scroll position.\r\n         textArea.style.position = 'fixed';\r\n         textArea.style.top = '0';\r\n         textArea.style.left = '0';\r\n\r\n         // Ensure it has a small width and height. Setting to 1px / 1em\r\n         // doesn't work as this gives a negative w/h on some browsers.\r\n         textArea.style.width = '2em';\r\n         textArea.style.height = '2em';\r\n\r\n         // We don't need padding, reducing the size if it does flash render.\r\n         textArea.style.padding = '0';\r\n\r\n         // Clean up any borders.\r\n         textArea.style.border = 'none';\r\n         textArea.style.outline = 'none';\r\n         textArea.style.boxShadow = 'none';\r\n\r\n         // Avoid flash of the white box if rendered for any reason.\r\n         textArea.style.background = 'transparent';\r\n\r\n         textArea.value = text;\r\n\r\n         globalThis.document.body.appendChild(textArea);\r\n         textArea.focus();\r\n         textArea.select();\r\n\r\n         try\r\n         {\r\n            success = document.execCommand('copy');\r\n         }\r\n         catch (err) { /**/ }\r\n\r\n         document.body.removeChild(textArea);\r\n      }\r\n\r\n      return success;\r\n   }\r\n}\n\n/**\r\n * Provides a solid string hashing algorithm.\r\n *\r\n * Sourced from: https://stackoverflow.com/a/52171480\r\n *\r\n * @param {string}   str - String to hash.\r\n *\r\n * @param {number}   seed - A seed value altering the hash.\r\n *\r\n * @returns {number} Hash code.\r\n */\r\nfunction hashCode(str, seed = 0)\r\n{\r\n   if (typeof str !== 'string') { return 0; }\r\n\r\n   let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n\r\n   for (let ch, i = 0; i < str.length; i++)\r\n   {\r\n      ch = str.charCodeAt(i);\r\n      h1 = Math.imul(h1 ^ ch, 2654435761);\r\n      h2 = Math.imul(h2 ^ ch, 1597334677);\r\n   }\r\n\r\n   h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\r\n   h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\r\n\r\n   return 4294967296 * (2097151 & h2) + (h1 >>> 0);\r\n}\n\nconst s_UUIDV4_REGEX = /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\r\n\r\n/**\r\n * Generates a UUID v4 compliant ID. Please use a complete UUID generation package for guaranteed compliance.\r\n *\r\n * This code is an evolution of the following Gist.\r\n * https://gist.github.com/jed/982883\r\n *\r\n * There is a public domain / free copy license attached to it that is not a standard OSS license...\r\n * https://gist.github.com/jed/982883#file-license-txt\r\n *\r\n * @returns {string} UUIDv4\r\n */\r\nfunction uuidv4()\r\n{\r\n   return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>\r\n    (c ^ (globalThis.crypto || globalThis.msCrypto).getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\r\n}\r\n\r\n/**\r\n * Validates that the given string is formatted as a UUIDv4 string.\r\n *\r\n * @param {string}   uuid - UUID string to test.\r\n *\r\n * @returns {boolean} Is UUIDv4 string.\r\n */\r\nuuidv4.isValid = (uuid) => s_UUIDV4_REGEX.test(uuid);\n\n/**\r\n * Normalizes a string.\r\n *\r\n * @param {string}   query - A string to normalize for comparisons.\r\n *\r\n * @returns {string} Cleaned string.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\r\n */\r\nfunction normalizeString(query)\r\n{\r\n   return query.trim().normalize('NFD').replace(/[\\x00-\\x1F]/gm, ''); // eslint-disable-line no-control-regex\r\n}\n\n/**\r\n * Recursive function that finds the closest parent stacking context.\r\n * See also https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\r\n *\r\n * Original author: Kerry Liu / https://github.com/gwwar\r\n *\r\n * @see https://github.com/gwwar/z-context/blob/master/content-script.js\r\n * @see https://github.com/gwwar/z-context/blob/master/LICENSE\r\n *\r\n * @param {Element} node -\r\n *\r\n * @returns {StackingContext} The closest parent stacking context\r\n */\r\nfunction getStackingContext(node)\r\n{\r\n   // the root element (HTML).\r\n   if (!node || node.nodeName === 'HTML')\r\n   {\r\n      return { node: document.documentElement, reason: 'root' };\r\n   }\r\n\r\n   // handle shadow root elements.\r\n   if (node.nodeName === '#document-fragment')\r\n   {\r\n      return getStackingContext(node.host);\r\n   }\r\n\r\n   const computedStyle = globalThis.getComputedStyle(node);\r\n\r\n   // position: fixed or sticky.\r\n   if (computedStyle.position === 'fixed' || computedStyle.position === 'sticky')\r\n   {\r\n      return { node, reason: `position: ${computedStyle.position}` };\r\n   }\r\n\r\n   // positioned (absolutely or relatively) with a z-index value other than \"auto\".\r\n   if (computedStyle.zIndex !== 'auto' && computedStyle.position !== 'static')\r\n   {\r\n      return { node, reason: `position: ${computedStyle.position}; z-index: ${computedStyle.zIndex}` };\r\n   }\r\n\r\n   // elements with an opacity value less than 1.\r\n   if (computedStyle.opacity !== '1')\r\n   {\r\n      return { node, reason: `opacity: ${computedStyle.opacity}` };\r\n   }\r\n\r\n   // elements with a transform value other than \"none\".\r\n   if (computedStyle.transform !== 'none')\r\n   {\r\n      return { node, reason: `transform: ${computedStyle.transform}` };\r\n   }\r\n\r\n   // elements with a mix-blend-mode value other than \"normal\".\r\n   if (computedStyle.mixBlendMode !== 'normal')\r\n   {\r\n      return { node, reason: `mixBlendMode: ${computedStyle.mixBlendMode}` };\r\n   }\r\n\r\n   // elements with a filter value other than \"none\".\r\n   if (computedStyle.filter !== 'none')\r\n   {\r\n      return { node, reason: `filter: ${computedStyle.filter}` };\r\n   }\r\n\r\n   // elements with a perspective value other than \"none\".\r\n   if (computedStyle.perspective !== 'none')\r\n   {\r\n      return { node, reason: `perspective: ${computedStyle.perspective}` };\r\n   }\r\n\r\n   // elements with a clip-path value other than \"none\".\r\n   if (computedStyle.clipPath !== 'none')\r\n   {\r\n      return { node, reason: `clip-path: ${computedStyle.clipPath} ` };\r\n   }\r\n\r\n   // elements with a mask value other than \"none\".\r\n   const mask = computedStyle.mask || computedStyle.webkitMask;\r\n   if (mask !== 'none' && mask !== undefined)\r\n   {\r\n      return { node, reason: `mask:  ${mask}` };\r\n   }\r\n\r\n   // elements with a mask-image value other than \"none\".\r\n   const maskImage = computedStyle.maskImage || computedStyle.webkitMaskImage;\r\n   if (maskImage !== 'none' && maskImage !== undefined)\r\n   {\r\n      return { node, reason: `mask-image: ${maskImage}` };\r\n   }\r\n\r\n   // elements with a mask-border value other than \"none\".\r\n   const maskBorder = computedStyle.maskBorder || computedStyle.webkitMaskBorder;\r\n   if (maskBorder !== 'none' && maskBorder !== undefined)\r\n   {\r\n      return { node, reason: `mask-border: ${maskBorder}` };\r\n   }\r\n\r\n   // elements with isolation set to \"isolate\".\r\n   if (computedStyle.isolation === 'isolate')\r\n   {\r\n      return { node, reason: `isolation: ${computedStyle.isolation}` };\r\n   }\r\n\r\n   // transform or opacity in will-change even if you don't specify values for these attributes directly.\r\n   if (computedStyle.willChange === 'transform' || computedStyle.willChange === 'opacity')\r\n   {\r\n      return { node, reason: `willChange: ${computedStyle.willChange}` };\r\n   }\r\n\r\n   // elements with -webkit-overflow-scrolling set to \"touch\".\r\n   if (computedStyle.webkitOverflowScrolling === 'touch')\r\n   {\r\n      return { node, reason: '-webkit-overflow-scrolling: touch' };\r\n   }\r\n\r\n   // an item with a z-index value other than \"auto\".\r\n   if (computedStyle.zIndex !== 'auto')\r\n   {\r\n      const parentStyle = globalThis.getComputedStyle(node.parentNode);\r\n      // with a flex|inline-flex parent.\r\n      if (parentStyle.display === 'flex' || parentStyle.display === 'inline-flex')\r\n      {\r\n         return { node, reason: `flex-item; z-index: ${computedStyle.zIndex}` };\r\n         // with a grid parent.\r\n      }\r\n      else if (parentStyle.grid !== 'none / none / none / row / auto / auto')\r\n      {\r\n         return { node, reason: `child of grid container; z-index: ${computedStyle.zIndex}` };\r\n      }\r\n   }\r\n\r\n   // contain with a value of layout, or paint, or a composite value that includes either of them\r\n   const contain = computedStyle.contain;\r\n   if (['layout', 'paint', 'strict', 'content'].indexOf(contain) > -1 ||\r\n    contain.indexOf('paint') > -1 ||\r\n    contain.indexOf('layout') > -1\r\n   )\r\n   {\r\n      return { node, reason: `contain: ${contain}` };\r\n   }\r\n\r\n   return getStackingContext(node.parentNode);\r\n}\r\n\r\n/**\r\n * @typedef {object} StackingContext\r\n *\r\n * @property {Element} node - A DOM Element.\r\n *\r\n * @property {string}  reason - Reason for why a stacking context was created.\r\n */\n\nconst s_REGEX = /(\\d+)\\s*px/;\r\n\r\n/**\r\n * Parses a pixel string / computed styles. Ex. `100px` returns `100`.\r\n *\r\n * @param {string}   value - Value to parse.\r\n *\r\n * @returns {number|undefined} The integer component of a pixel string.\r\n */\r\nfunction styleParsePixels(value)\r\n{\r\n   if (typeof value !== 'string') { return void 0; }\r\n\r\n   const isPixels = s_REGEX.test(value);\r\n   const number = parseInt(value);\r\n\r\n   return isPixels && Number.isFinite(number) ? number : void 0;\r\n}\n\n/**\r\n * Provides a managed dynamic style sheet / element useful in configuring global CSS variables. When creating an\r\n * instance of TJSStyleManager you must provide a \"document key\" / string for the style element added. The style element\r\n * can be accessed via `document[docKey]`.\r\n *\r\n * Instances of TJSStyleManager can also be versioned by supplying a positive integer greater than or equal to `1` via\r\n * the 'version' option. This version number is assigned to the associated style element. When a TJSStyleManager\r\n * instance is created and there is an existing instance with a version that is lower than the current instance all CSS\r\n * rules are removed letting the higher version to take precedence. This isn't a perfect system and requires thoughtful\r\n * construction of CSS variables exposed, but allows multiple independently compiled TRL packages to load the latest\r\n * CSS variables. It is recommended to always set `overwrite` option of {@link TJSStyleManager.setProperty} and\r\n * {@link TJSStyleManager.setProperties} to `false` when loading initial values.\r\n */\r\nclass TJSStyleManager\r\n{\r\n   /** @type {CSSStyleRule} */\r\n   #cssRule;\r\n\r\n   /** @type {string} */\r\n   #docKey;\r\n\r\n   /** @type {string} */\r\n   #selector;\r\n\r\n   /** @type {HTMLStyleElement} */\r\n   #styleElement;\r\n\r\n   /** @type {number} */\r\n   #version;\r\n\r\n   /**\r\n    *\r\n    * @param {object}   opts - Options.\r\n    *\r\n    * @param {string}   opts.docKey - Required key providing a link to a specific style sheet element.\r\n    *\r\n    * @param {string}   [opts.selector=:root] - Selector element.\r\n    *\r\n    * @param {Document} [opts.document] - Target document to load styles into.\r\n    *\r\n    * @param {number}   [opts.version] - An integer representing the version / level of styles being managed.\r\n    */\r\n   constructor({ docKey, selector = ':root', document = globalThis.document, version } = {})\r\n   {\r\n      if (typeof docKey !== 'string') { throw new TypeError(`StyleManager error: 'docKey' is not a string.`); }\r\n\r\n      // TODO: Verify 'document' type from Popout FVTT module. For some reason the popout document trips this\r\n      //  unintentionally.\r\n      // if (!(document instanceof Document))\r\n      // {\r\n      //    throw new TypeError(`TJSStyleManager error: 'document' is not an instance of Document.`);\r\n      // }\r\n\r\n      if (typeof selector !== 'string') { throw new TypeError(`StyleManager error: 'selector' is not a string.`); }\r\n\r\n      if (version !== void 0 && !Number.isSafeInteger(version) && version < 1)\r\n      {\r\n         throw new TypeError(`StyleManager error: 'version' is defined and is not a positive integer >= 1.`);\r\n      }\r\n\r\n      this.#selector = selector;\r\n      this.#docKey = docKey;\r\n      this.#version = version;\r\n\r\n      if (document[this.#docKey] === void 0)\r\n      {\r\n         this.#styleElement = document.createElement('style');\r\n\r\n         document.head.append(this.#styleElement);\r\n\r\n         // Set initial style manager version if any supplied.\r\n         this.#styleElement._STYLE_MANAGER_VERSION = version;\r\n\r\n         this.#styleElement.sheet.insertRule(`${selector} {}`, 0);\r\n\r\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\r\n\r\n         document[docKey] = this.#styleElement;\r\n      }\r\n      else\r\n      {\r\n         this.#styleElement = document[docKey];\r\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\r\n\r\n         if (version)\r\n         {\r\n            const existingVersion = this.#styleElement._STYLE_MANAGER_VERSION ?? 0;\r\n\r\n            // Remove all existing CSS rules / text if version is greater than existing version.\r\n            if (version > existingVersion)\r\n            {\r\n               this.#cssRule.style.cssText = '';\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns {string} Provides an accessor to get the `cssText` for the style sheet.\r\n    */\r\n   get cssText()\r\n   {\r\n      return this.#cssRule.style.cssText;\r\n   }\r\n\r\n   /**\r\n    * @returns {number} Returns the version of this instance.\r\n    */\r\n   get version()\r\n   {\r\n      return this.#version;\r\n   }\r\n\r\n   /**\r\n    * Provides a copy constructor to duplicate an existing TJSStyleManager instance into a new document.\r\n    *\r\n    * Note: This is used to support the `PopOut` module.\r\n    *\r\n    * @param {Document} [document] Target browser document to clone into.\r\n    *\r\n    * @returns {TJSStyleManager} New style manager instance.\r\n    */\r\n   clone(document = globalThis.document)\r\n   {\r\n      const newStyleManager = new TJSStyleManager({\r\n         selector: this.#selector,\r\n         docKey: this.#docKey,\r\n         document,\r\n         version: this.#version\r\n      });\r\n\r\n      newStyleManager.#cssRule.style.cssText = this.#cssRule.style.cssText;\r\n\r\n      return newStyleManager;\r\n   }\r\n\r\n   get()\r\n   {\r\n      const cssText = this.#cssRule.style.cssText;\r\n\r\n      const result = {};\r\n\r\n      if (cssText !== '')\r\n      {\r\n         for (const entry of cssText.split(';'))\r\n         {\r\n            if (entry !== '')\r\n            {\r\n               const values = entry.split(':');\r\n               result[values[0].trim()] = values[1];\r\n            }\r\n         }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Gets a particular CSS variable.\r\n    *\r\n    * @param {string}   key - CSS variable property key.\r\n    *\r\n    * @returns {string} Returns CSS variable value.\r\n    */\r\n   getProperty(key)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\r\n\r\n      return this.#cssRule.style.getPropertyValue(key);\r\n   }\r\n\r\n   /**\r\n    * Set rules by property / value; useful for CSS variables.\r\n    *\r\n    * @param {{ [key: string]: string }}  rules - An object with property / value string pairs to load.\r\n    *\r\n    * @param {boolean}                 [overwrite=true] - When true overwrites any existing values.\r\n    */\r\n   setProperties(rules, overwrite = true)\r\n   {\r\n      if (!isObject(rules)) { throw new TypeError(`StyleManager error: 'rules' is not an object.`); }\r\n\r\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\r\n\r\n      if (overwrite)\r\n      {\r\n         for (const [key, value] of Object.entries(rules))\r\n         {\r\n            this.#cssRule.style.setProperty(key, value);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         // Only set property keys for entries that don't have an existing rule set.\r\n         for (const [key, value] of Object.entries(rules))\r\n         {\r\n            if (this.#cssRule.style.getPropertyValue(key) === '')\r\n            {\r\n               this.#cssRule.style.setProperty(key, value);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Sets a particular property.\r\n    *\r\n    * @param {string}   key - CSS variable property key.\r\n    *\r\n    * @param {string}   value - CSS variable value.\r\n    *\r\n    * @param {boolean}  [overwrite=true] - Overwrite any existing value.\r\n    */\r\n   setProperty(key, value, overwrite = true)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\r\n\r\n      if (typeof value !== 'string') { throw new TypeError(`StyleManager error: 'value' is not a string.`); }\r\n\r\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\r\n\r\n      if (overwrite)\r\n      {\r\n         this.#cssRule.style.setProperty(key, value);\r\n      }\r\n      else\r\n      {\r\n         if (this.#cssRule.style.getPropertyValue(key) === '')\r\n         {\r\n            this.#cssRule.style.setProperty(key, value);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Removes the property keys specified. If `keys` is an iterable list then all property keys in the list are removed.\r\n    *\r\n    * @param {Iterable<string>} keys - The property keys to remove.\r\n    */\r\n   removeProperties(keys)\r\n   {\r\n      if (!isIterable(keys)) { throw new TypeError(`StyleManager error: 'keys' is not an iterable list.`); }\r\n\r\n      for (const key of keys)\r\n      {\r\n         if (typeof key === 'string') { this.#cssRule.style.removeProperty(key); }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Removes a particular CSS variable.\r\n    *\r\n    * @param {string}   key - CSS variable property key.\r\n    *\r\n    * @returns {string} CSS variable value when removed.\r\n    */\r\n   removeProperty(key)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\r\n\r\n      return this.#cssRule.style.removeProperty(key);\r\n   }\r\n}\n\n/**\r\n * Defines the application shell contract. If Svelte components export getter / setters for the following properties\r\n * then that component is considered an application shell.\r\n *\r\n * @type {string[]}\r\n */\r\nconst applicationShellContract = ['elementRoot'];\r\n\r\nObject.freeze(applicationShellContract);\n\n/**\r\n * Provides a method to determine if the passed in object / Svelte component follows the application shell contract.\r\n * This involves ensuring that the accessors defined in `applicationShellContract`.\r\n *\r\n * Note: A caveat is that when using Vite in a developer build components are wrapped in a proxy / ProxyComponent that\r\n * defines instance accessors versus on the prototype, so the check below ensures that all accessors in the contract are\r\n * either available on the prototype or directly on the instance.\r\n *\r\n * @param {*}  component - Object / component to test.\r\n *\r\n * @returns {boolean} Whether the component is a ApplicationShell or TJSApplicationShell.\r\n */\r\nfunction isApplicationShell(component)\r\n{\r\n   if (component === null || component === void 0) { return false; }\r\n\r\n   let compHasContract = true;\r\n   let protoHasContract = true;\r\n\r\n   // Check for accessors on the instance.\r\n   for (const accessor of applicationShellContract)\r\n   {\r\n      const descriptor = Object.getOwnPropertyDescriptor(component, accessor);\r\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { compHasContract = false; }\r\n   }\r\n\r\n   // Get the prototype which is the parent SvelteComponent that has any getter / setters.\r\n   const prototype = Object.getPrototypeOf(component);\r\n\r\n   // Verify the application shell contract. If the accessors (getters / setters) are defined for\r\n   // `applicationShellContract`.\r\n   for (const accessor of applicationShellContract)\r\n   {\r\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, accessor);\r\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { protoHasContract = false; }\r\n   }\r\n\r\n   return compHasContract || protoHasContract;\r\n}\n\n/**\r\n * Provides basic duck typing to determine if the provided object is a HMR ProxyComponent instance or class.\r\n *\r\n * @param {*}  comp - Data to check as a HMR proxy component.\r\n *\r\n * @returns {boolean} Whether basic duck typing succeeds.\r\n */\r\nfunction isHMRProxy(comp)\r\n{\r\n   const instanceName = comp?.constructor?.name;\r\n   if (typeof instanceName === 'string' && (instanceName.startsWith('Proxy<') || instanceName === 'ProxyComponent'))\r\n   {\r\n      return true;\r\n   }\r\n\r\n   const prototypeName = comp?.prototype?.constructor?.name;\r\n   return typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') ||\r\n    prototypeName === 'ProxyComponent');\r\n}\n\n/**\r\n * Provides basic duck typing to determine if the provided function is a constructor function for a Svelte component.\r\n *\r\n * @param {*}  comp - Data to check as a Svelte component.\r\n *\r\n * @returns {boolean} Whether basic duck typing succeeds.\r\n */\r\nfunction isSvelteComponent(comp)\r\n{\r\n   if (comp === null || comp === void 0 || typeof comp !== 'function') { return false; }\r\n\r\n   // When using Vite in a developer build the SvelteComponent is wrapped in a ProxyComponent class.\r\n   // This class doesn't define methods on the prototype, so we must check if the constructor name\r\n   // starts with `Proxy<` as it provides the wrapped component as `Proxy<_wrapped component name_>`.\r\n   const prototypeName = comp?.prototype?.constructor?.name;\r\n   if (typeof prototypeName === 'string' && (prototypeName.startsWith('Proxy<') || prototypeName === 'ProxyComponent'))\r\n   {\r\n      return true;\r\n   }\r\n\r\n   return typeof window !== void 0 ?\r\n    typeof comp.prototype.$destroy === 'function' && typeof comp.prototype.$on === 'function' : // client-side\r\n     typeof comp.render === 'function'; // server-side\r\n}\n\n/**\r\n * Validates `config` argument whether it is a valid {@link TJSSvelteConfig}.\r\n *\r\n * @param {*}  config - The potential config object to validate.\r\n *\r\n * @param {boolean}  [raiseException=false] - If validation fails raise an exception.\r\n *\r\n * @returns {boolean} Is the config a valid TJSSvelteConfig.\r\n *\r\n * @throws {TypeError}  Any validation error when `raiseException` is enabled.\r\n */\r\nfunction isTJSSvelteConfig(config, raiseException = false)\r\n{\r\n   if (!isObject(config))\r\n   {\r\n      if (raiseException) { throw new TypeError(`isTJSSvelteConfig error: 'config' is not an object.`); }\r\n      return false;\r\n   }\r\n\r\n   if (!isSvelteComponent(config.class))\r\n   {\r\n      if (raiseException)\r\n      {\r\n         throw new TypeError(`isTJSSvelteConfig error: 'config.class' is not a Svelte component constructor.`);\r\n      }\r\n      return false;\r\n   }\r\n\r\n   return true;\r\n}\r\n\r\n/* eslint-disable */  // jsdoc/valid-types doesn't like the Google closure constructor function. TODO: verify in future eslint-plugin-jsdoc version\r\n/**\r\n * @typedef {object} TJSSvelteConfig\r\n *\r\n * @property {{ new(options: import('#svelte').ComponentConstructorOptions): import('#svelte').SvelteComponent | import('#svelte').SvelteComponentTyped }} class -\r\n *\r\n * @property {Element|Document|ShadowRoot}   [target=document.body] -\r\n *\r\n * @property {Element} [anchor] -\r\n *\r\n * @property {() => Record<string, *> | Record<string, *>} [props] -\r\n *\r\n * @property {() => (Record<string, *> | Map<string, *>) | Map<string, *> | Record<string, *>} [context] -\r\n *\r\n * @property {boolean}  [hydrate] -\r\n *\r\n * @property {boolean} [intro] -\r\n *\r\n * @property {boolean}  [$$inline] -\r\n */\r\n/* eslint-enable */\n\n/**\r\n * Runs outro transition then destroys Svelte component.\r\n *\r\n * Workaround for https://github.com/sveltejs/svelte/issues/4056\r\n *\r\n * @param {*}  instance - A Svelte component.\r\n */\r\nasync function outroAndDestroy(instance)\r\n{\r\n   return new Promise((resolve) =>\r\n   {\r\n      if (instance.$$.fragment && instance.$$.fragment.o)\r\n      {\r\n         group_outros();\r\n         transition_out(instance.$$.fragment, 0, 0, () =>\r\n         {\r\n            instance.$destroy();\r\n            resolve();\r\n         });\r\n         check_outros();\r\n      }\r\n      else\r\n      {\r\n         instance.$destroy();\r\n         resolve();\r\n      }\r\n   });\r\n}\n\n/**\r\n * Parses a TyphonJS Svelte config object ensuring that classes specified are Svelte components and props are set\r\n * correctly.\r\n *\r\n * @param {object}   config - Svelte config object.\r\n *\r\n * @param {*}        [thisArg] - `This` reference to set for invoking any props function.\r\n *\r\n * @returns {object} The processed Svelte config object.\r\n */\r\nfunction parseTJSSvelteConfig(config, thisArg = void 0)\r\n{\r\n   if (typeof config !== 'object')\r\n   {\r\n      throw new TypeError(`parseSvelteConfig - 'config' is not an object:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (!isSvelteComponent(config.class))\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'class' is not a Svelte component constructor for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (config.hydrate !== void 0 && typeof config.hydrate !== 'boolean')\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'hydrate' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (config.intro !== void 0 && typeof config.intro !== 'boolean')\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'intro' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (config.target !== void 0 && typeof config.target !== 'string' && !(config.target instanceof HTMLElement) &&\r\n    !(config.target instanceof ShadowRoot) && !(config.target instanceof DocumentFragment))\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'target' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\\n${\r\n        JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (config.anchor !== void 0 && typeof config.anchor !== 'string' && !(config.anchor instanceof HTMLElement) &&\r\n    !(config.anchor instanceof ShadowRoot) && !(config.anchor instanceof DocumentFragment))\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'anchor' is not a string, HTMLElement, ShadowRoot, or DocumentFragment for config:\\n${\r\n        JSON.stringify(config)}.`);\r\n   }\r\n\r\n   if (config.context !== void 0 && typeof config.context !== 'function' && !(config.context instanceof Map) &&\r\n    typeof config.context !== 'object')\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'context' is not a Map, function or object for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   // Validate extra TyphonJS options --------------------------------------------------------------------------------\r\n\r\n   // `selectorTarget` optionally stores a target element found in main element.\r\n   if (config.selectorTarget !== void 0 && typeof config.selectorTarget !== 'string')\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'selectorTarget' is not a string for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   // `options` stores `injectApp`, `injectEventbus`, and `selectorElement`.\r\n   if (config.options !== void 0 && typeof config.options !== 'object')\r\n   {\r\n      throw new TypeError(\r\n       `parseSvelteConfig - 'options' is not an object for config:\\n${JSON.stringify(config)}.`);\r\n   }\r\n\r\n   // Validate TyphonJS standard options.\r\n   if (config.options !== void 0)\r\n   {\r\n      if (config.options.injectApp !== void 0 && typeof config.options.injectApp !== 'boolean')\r\n      {\r\n         throw new TypeError(\r\n          `parseSvelteConfig - 'options.injectApp' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n      }\r\n\r\n      if (config.options.injectEventbus !== void 0 && typeof config.options.injectEventbus !== 'boolean')\r\n      {\r\n         throw new TypeError(\r\n          `parseSvelteConfig - 'options.injectEventbus' is not a boolean for config:\\n${JSON.stringify(config)}.`);\r\n      }\r\n\r\n      // `selectorElement` optionally stores a main element selector to be found in a HTMLElement target.\r\n      if (config.options.selectorElement !== void 0 && typeof config.options.selectorElement !== 'string')\r\n      {\r\n         throw new TypeError(\r\n          `parseSvelteConfig - 'selectorElement' is not a string for config:\\n${JSON.stringify(config)}.`);\r\n      }\r\n   }\r\n\r\n   const svelteConfig = { ...config };\r\n\r\n   // Delete extra Svelte options.\r\n   delete svelteConfig.options;\r\n\r\n   let externalContext = {};\r\n\r\n   // If a context callback function is provided then invoke it with `this` being the Foundry app.\r\n   // If an object is returned it adds the entries to external context.\r\n   if (typeof svelteConfig.context === 'function')\r\n   {\r\n      const contextFunc = svelteConfig.context;\r\n      delete svelteConfig.context;\r\n\r\n      const result = contextFunc.call(thisArg);\r\n      if (isObject(result))\r\n      {\r\n         externalContext = { ...result };\r\n      }\r\n      else\r\n      {\r\n         throw new Error(`parseSvelteConfig - 'context' is a function that did not return an object for config:\\n${\r\n          JSON.stringify(config)}`);\r\n      }\r\n   }\r\n   else if (svelteConfig.context instanceof Map)\r\n   {\r\n      externalContext = Object.fromEntries(svelteConfig.context);\r\n      delete svelteConfig.context;\r\n   }\r\n   else if (isObject(svelteConfig.context))\r\n   {\r\n      externalContext = svelteConfig.context;\r\n      delete svelteConfig.context;\r\n   }\r\n\r\n   // If a props is a function then invoke it with `this` being the Foundry app.\r\n   // If an object is returned set it as the props.\r\n   svelteConfig.props = s_PROCESS_PROPS(svelteConfig.props, thisArg, config);\r\n\r\n   // Process children components attaching to external context.\r\n   if (Array.isArray(svelteConfig.children))\r\n   {\r\n      const children = [];\r\n\r\n      for (let cntr = 0; cntr < svelteConfig.children.length; cntr++)\r\n      {\r\n         const child = svelteConfig.children[cntr];\r\n\r\n         if (!isSvelteComponent(child.class))\r\n         {\r\n            throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for child[${cntr}] for config:\\n${\r\n             JSON.stringify(config)}`);\r\n         }\r\n\r\n         child.props = s_PROCESS_PROPS(child.props, thisArg, config);\r\n\r\n         children.push(child);\r\n      }\r\n\r\n      if (children.length > 0)\r\n      {\r\n         externalContext.children = children;\r\n      }\r\n\r\n      delete svelteConfig.children;\r\n   }\r\n   else if (isObject(svelteConfig.children))\r\n   {\r\n      if (!isSvelteComponent(svelteConfig.children.class))\r\n      {\r\n         throw new Error(`parseSvelteConfig - 'class' is not a Svelte component for children object for config:\\n${\r\n          JSON.stringify(config)}`);\r\n      }\r\n\r\n      svelteConfig.children.props = s_PROCESS_PROPS(svelteConfig.children.props, thisArg, config);\r\n\r\n      externalContext.children = [svelteConfig.children];\r\n      delete svelteConfig.children;\r\n   }\r\n\r\n   if (!(svelteConfig.context instanceof Map))\r\n   {\r\n      svelteConfig.context = new Map();\r\n   }\r\n\r\n   svelteConfig.context.set('#external', externalContext);\r\n\r\n   return svelteConfig;\r\n}\r\n\r\n/**\r\n * Processes Svelte props. Potentially props can be a function to invoke with `thisArg`.\r\n *\r\n * @param {object|Function}   props - Svelte props.\r\n *\r\n * @param {*}                 thisArg - `This` reference to set for invoking any props function.\r\n *\r\n * @param {object}            config - Svelte config\r\n *\r\n * @returns {object|void}     Svelte props.\r\n */\r\nfunction s_PROCESS_PROPS(props, thisArg, config)\r\n{\r\n   // If a props is a function then invoke it with `this` being the Foundry app.\r\n   // If an object is returned set it as the props.\r\n   if (typeof props === 'function')\r\n   {\r\n      const result = props.call(thisArg);\r\n      if (isObject(result))\r\n      {\r\n         return result;\r\n      }\r\n      else\r\n      {\r\n         throw new Error(`parseSvelteConfig - 'props' is a function that did not return an object for config:\\n${\r\n          JSON.stringify(config)}`);\r\n      }\r\n   }\r\n   else if (isObject(props))\r\n   {\r\n      return props;\r\n   }\r\n   else if (props !== void 0)\r\n   {\r\n      throw new Error(\r\n       `parseSvelteConfig - 'props' is not a function or an object for config:\\n${JSON.stringify(config)}`);\r\n   }\r\n\r\n   return {};\r\n}\n\n/**\r\n * Wraps a callback in a debounced timeout.\r\n *\r\n * Delay execution of the callback function until the function has not been called for the given delay in milliseconds.\r\n *\r\n * @param {Function} callback - A function to execute once the debounced threshold has been passed.\r\n *\r\n * @param {number}   delay - An amount of time in milliseconds to delay.\r\n *\r\n * @returns {Function} A wrapped function that can be called to debounce execution.\r\n */\r\nfunction debounce(callback, delay)\r\n{\r\n   let timeoutId;\r\n\r\n   return function(...args)\r\n   {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = setTimeout(() => { callback.apply(this, args); }, delay);\r\n   };\r\n}\n\n/**\r\n * Provides a method to determine if the passed in Svelte component has a getter accessor.\r\n *\r\n * @param {*}        object - An object.\r\n *\r\n * @param {string}   accessor - Accessor to test.\r\n *\r\n * @returns {boolean} Whether the component has the getter for accessor.\r\n */\r\nfunction hasGetter(object, accessor)\r\n{\r\n   if (object === null || object === void 0) { return false; }\r\n\r\n   // Check for instance accessor.\r\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\r\n   if (iDescriptor !== void 0 && iDescriptor.get !== void 0) { return true; }\r\n\r\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\r\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\r\n   {\r\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\r\n      if (descriptor !== void 0 && descriptor.get !== void 0) { return true; }\r\n   }\r\n\r\n   return false;\r\n}\r\n\r\n/**\r\n * Provides a method to determine if the passed in Svelte component has a getter & setter accessor.\r\n *\r\n * @param {*}        object - An object.\r\n *\r\n * @param {string}   accessor - Accessor to test.\r\n *\r\n * @returns {boolean} Whether the component has the getter and setter for accessor.\r\n */\r\nfunction hasAccessor(object, accessor)\r\n{\r\n   if (object === null || object === void 0) { return false; }\r\n\r\n   // Check for instance accessor.\r\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\r\n   if (iDescriptor !== void 0 && iDescriptor.get !== void 0 && iDescriptor.set !== void 0) { return true; }\r\n\r\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\r\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\r\n   {\r\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\r\n      if (descriptor !== void 0 && descriptor.get !== void 0 && descriptor.set !== void 0) { return true; }\r\n   }\r\n\r\n   return false;\r\n}\r\n\r\n/**\r\n * Provides a method to determine if the passed in Svelte component has a setter accessor.\r\n *\r\n * @param {*}        object - An object.\r\n *\r\n * @param {string}   accessor - Accessor to test.\r\n *\r\n * @returns {boolean} Whether the component has the setter for accessor.\r\n */\r\nfunction hasSetter(object, accessor)\r\n{\r\n   if (object === null || object === void 0) { return false; }\r\n\r\n   // Check for instance accessor.\r\n   const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\r\n   if (iDescriptor !== void 0 && iDescriptor.set !== void 0) { return true; }\r\n\r\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\r\n   for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o))\r\n   {\r\n      const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\r\n      if (descriptor !== void 0 && descriptor.set !== void 0) { return true; }\r\n   }\r\n\r\n   return false;\r\n}\n\n/**\r\n * Returns whether the target is or has the given prototype walking up the prototype chain.\r\n *\r\n * @param {*}  target - Any target to test.\r\n *\r\n * @param {Function} Prototype - Prototype function / class constructor to find.\r\n *\r\n * @returns {boolean} Target matches prototype.\r\n */\r\nfunction hasPrototype(target, Prototype)\r\n{\r\n   /* c8 ignore next */\r\n   if (typeof target !== 'function') { return false; }\r\n\r\n   if (target === Prototype) { return true; }\r\n\r\n   // Walk parent prototype chain. Check for descriptor at each prototype level.\r\n   for (let proto = Object.getPrototypeOf(target); proto; proto = Object.getPrototypeOf(proto))\r\n   {\r\n      if (proto === Prototype) { return true; }\r\n   }\r\n\r\n   return false;\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction isSpace(character) {\n    return character == \" \" || character == \"\\n\" || character == \"\\r\" || character == \"\\t\";\n}\nfunction isQuote(character) {\n    return character == '\"' || character == \"'\";\n}\nconst TAG_START = \"<\";\nconst TAG_END = \">\";\nconst ENCODED_TAG_START = \"&lt;\";\nconst ENCODED_TAG_END = \"&gt;\";\nclass InPlaintextState {\n    constructor(options) {\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == TAG_START) {\n            transition(new InTagNameState(this.options));\n            return \"\";\n        }\n        else if (character == TAG_END && this.options.encodePlaintextTagDelimiters) {\n            return ENCODED_TAG_END;\n        }\n        return character;\n    }\n}\nclass InTagNameState {\n    constructor(options) {\n        this.options = options;\n        this.nameBuffer = \"\";\n        this.isClosingTag = false;\n    }\n    consume(character, transition) {\n        if (this.nameBuffer.length == 0) {\n            if (isSpace(character)) {\n                transition(new InPlaintextState(this.options));\n                return ((this.options.encodePlaintextTagDelimiters ? ENCODED_TAG_START : \"<\") +\n                    character);\n            }\n            if (character == \"/\") {\n                this.isClosingTag = true;\n                return \"\";\n            }\n        }\n        if (isSpace(character)) {\n            if (this.isNameBufferAnAllowedTag()) {\n                transition(new InTagState(0 /* TagMode.Allowed */, this.options));\n                return TAG_START + (this.isClosingTag ? \"/\" : \"\") + this.nameBuffer + character;\n            }\n            else {\n                transition(new InTagState(1 /* TagMode.Disallowed */, this.options));\n                return this.options.tagReplacementText;\n            }\n        }\n        if (character == TAG_START) {\n            this.nameBuffer += ENCODED_TAG_START;\n            return \"\";\n        }\n        if (character == TAG_END) {\n            transition(new InPlaintextState(this.options));\n            if (this.isNameBufferAnAllowedTag()) {\n                return TAG_START + (this.isClosingTag ? \"/\" : \"\") + this.nameBuffer + character;\n            }\n            else {\n                return this.options.tagReplacementText;\n            }\n        }\n        if (character == \"-\" && this.nameBuffer == \"!-\") {\n            transition(new InCommentState(this.options));\n            return \"\";\n        }\n        this.nameBuffer += character;\n        return \"\";\n    }\n    isNameBufferAnAllowedTag() {\n        const tagName = this.nameBuffer.toLowerCase();\n        if (this.options.allowedTags) {\n            return this.options.allowedTags.has(tagName);\n        }\n        else if (this.options.disallowedTags) {\n            return !this.options.disallowedTags.has(tagName);\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass InTagState {\n    constructor(mode, options) {\n        this.mode = mode;\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == TAG_END) {\n            transition(new InPlaintextState(this.options));\n        }\n        else if (isQuote(character)) {\n            transition(new InQuotedStringInTagState(this.mode, character, this.options));\n        }\n        if (this.mode == 1 /* TagMode.Disallowed */) {\n            return \"\";\n        }\n        if (character == TAG_START) {\n            return ENCODED_TAG_START;\n        }\n        else {\n            return character;\n        }\n    }\n}\nclass InQuotedStringInTagState {\n    constructor(mode, quoteCharacter, options) {\n        this.mode = mode;\n        this.quoteCharacter = quoteCharacter;\n        this.options = options;\n    }\n    consume(character, transition) {\n        if (character == this.quoteCharacter) {\n            transition(new InTagState(this.mode, this.options));\n        }\n        if (this.mode == 1 /* TagMode.Disallowed */) {\n            return \"\";\n        }\n        if (character == TAG_START) {\n            return ENCODED_TAG_START;\n        }\n        else if (character == TAG_END) {\n            return ENCODED_TAG_END;\n        }\n        else {\n            return character;\n        }\n    }\n}\nclass InCommentState {\n    constructor(options) {\n        this.options = options;\n        this.consecutiveHyphens = 0;\n    }\n    consume(character, transition) {\n        if (character == \">\" && this.consecutiveHyphens >= 2) {\n            transition(new InPlaintextState(this.options));\n        }\n        else if (character == \"-\") {\n            this.consecutiveHyphens++;\n        }\n        else {\n            this.consecutiveHyphens = 0;\n        }\n        return \"\";\n    }\n}\n\nconst DefaultStateMachineOptions = {\n    tagReplacementText: \"\",\n    encodePlaintextTagDelimiters: true,\n};\nclass StateMachine {\n    constructor(partialOptions = {}) {\n        this.state = new InPlaintextState(Object.assign(Object.assign({}, DefaultStateMachineOptions), partialOptions));\n        this.transitionFunction = ((next) => {\n            this.state = next;\n        }).bind(this);\n    }\n    consume(text) {\n        let outputBuffer = \"\";\n        for (const character of text) {\n            outputBuffer += this.state.consume(character, this.transitionFunction);\n        }\n        return outputBuffer;\n    }\n}\nfunction striptags(text, options = {}) {\n    return new StateMachine(options).consume(text);\n}\n\nexport { A11yHelper, BrowserSupports, ClipboardAccess, ManagedPromise, TJSStyleManager, debounce, deepMerge, getStackingContext, hasAccessor, hasGetter, hasPrototype, hasSetter, hashCode, isApplicationShell, isAsyncIterable, isHMRProxy, isIterable, isObject, isPlainObject, isSvelteComponent, isTJSSvelteConfig, klona, normalizeString, outroAndDestroy, parseTJSSvelteConfig, safeAccess, safeSet, striptags, styleParsePixels, uuidv4 };\n//# sourceMappingURL=index.js.map\n","import { isIterable } from '@typhonjs-svelte/lib/util';\n\n/**\r\n * Provides a readable store to track keys actively pressed. KeyStore is designed to be used with the {@link keyforward}\r\n * action.\r\n */\r\nclass KeyStore\r\n{\r\n   #keySet;\r\n\r\n   /**\r\n    * @type {Map<string, number>}\r\n    */\r\n   #keyMap = new Map();\r\n\r\n   /**\r\n    * @type {KeyStoreOptions}\r\n    */\r\n   #options = { preventDefault: true, useCode: true, stopPropagation: true };\r\n\r\n   /**\r\n    * Stores the subscribers.\r\n    *\r\n    * @type {(function(KeyStore): void)[]}\r\n    */\r\n   #subscriptions = [];\r\n\r\n   /**\r\n    * @param {Iterable<string>}  [keyNames] -\r\n    *\r\n    * @param {KeyStoreOptions}   [options] - Optional parameters\r\n    */\r\n   constructor(keyNames, options)\r\n   {\r\n      if (!isIterable(keyNames))\r\n      {\r\n         throw new TypeError(`'keyNames' is not an iterable list.`);\r\n      }\r\n\r\n      this.setOptions(options);\r\n\r\n      this.#keySet = new Set(keyNames);\r\n   }\r\n\r\n   /**\r\n    * Add given key to the tracking key set.\r\n    *\r\n    * @param {string}   key - Key to add.\r\n    */\r\n   addKey(key)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\r\n\r\n      this.#keySet.add(key);\r\n   }\r\n\r\n   /**\r\n    * @returns {boolean} True if any keys in the key set are pressed.\r\n    */\r\n\r\n   /**\r\n    * Returns true if any of given keys are pressed. If `keys` is undefined then the result is true if any keys being\r\n    * tracked are pressed.\r\n    *\r\n    * @param {string|Iterable<string>|undefined} keys - Zero or more key strings or list to verify if any pressed.\r\n    *\r\n    * @returns {boolean} True if any keys set are pressed.\r\n    */\r\n   anyPressed(keys)\r\n   {\r\n      // When no keys given then check if any key is pressed.\r\n      if (keys === void 0) { return this.#keyMap.size > 0; }\r\n\r\n      const isList = isIterable(keys);\r\n\r\n      if (typeof keys !== 'string' && !isList)\r\n      {\r\n         throw new TypeError(`'keys' is not a string or iterable list of strings.`);\r\n      }\r\n\r\n      let result = false;\r\n\r\n      if (isList)\r\n      {\r\n         for (const key of keys)\r\n         {\r\n            if (this.#keyMap.has(key))\r\n            {\r\n               result = true;\r\n               break;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         if (this.#keyMap.has(keys)) { result = true; }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Is the given key in the tracking key set.\r\n    *\r\n    * @param {string}   key - Key to check.\r\n    */\r\n   hasKey(key)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\r\n\r\n      this.#keySet.has(key);\r\n   }\r\n\r\n   /**\r\n    * Returns true if all given keys are pressed.\r\n    *\r\n    * @param {string|Iterable<string>} keys - One or more key strings to verify if pressed.\r\n    *\r\n    * @returns {boolean} Are all keys pressed.\r\n    */\r\n   isPressed(keys)\r\n   {\r\n      const isList = isIterable(keys);\r\n\r\n      if (typeof keys !== 'string' && !isList)\r\n      {\r\n         throw new TypeError(`'keys' is not a string or iterable list of strings.`);\r\n      }\r\n\r\n      let result = true;\r\n\r\n      if (isList)\r\n      {\r\n         for (const key of keys)\r\n         {\r\n            if (!this.#keyMap.has(key))\r\n            {\r\n               result = false;\r\n               break;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         if (!this.#keyMap.has(keys)) { result = false; }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Handle keydown event adding any key from the tracked key set.\r\n    *\r\n    * @param {KeyboardEvent}  event - KeyboardEvent.\r\n    */\r\n   keydown(event)\r\n   {\r\n      const key = this.#options.useCode ? event.code : event.key;\r\n\r\n      if (this.#keySet.has(key))\r\n      {\r\n         if (!this.#keyMap.has(key))\r\n         {\r\n            this.#keyMap.set(key, 1);\r\n            this._updateSubscribers();\r\n         }\r\n\r\n         if (this.#options.preventDefault) { event.preventDefault(); }\r\n         if (this.#options.stopPropagation) { event.stopPropagation(); }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns {IterableIterator<string>} Returns current pressed keys iterator.\r\n    */\r\n   keysPressed()\r\n   {\r\n      return this.#keyMap.keys();\r\n   }\r\n\r\n   /**\r\n    * @returns {IterableIterator<string>} Returns currently tracked keys iterator.\r\n    */\r\n   keysTracked()\r\n   {\r\n      return this.#keySet.keys();\r\n   }\r\n\r\n   /**\r\n    * Handle keyup event removing any key from the tracked key set.\r\n    *\r\n    * @param {KeyboardEvent}  event - KeyboardEvent.\r\n    */\r\n   keyup(event)\r\n   {\r\n      const key = this.#options.useCode ? event.code : event.key;\r\n\r\n      if (this.#keySet.has(key))\r\n      {\r\n         if (this.#keyMap.has(key))\r\n         {\r\n            this.#keyMap.delete(key);\r\n            this._updateSubscribers();\r\n         }\r\n\r\n         if (this.#options.preventDefault) { event.preventDefault(); }\r\n         if (this.#options.stopPropagation) { event.stopPropagation(); }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Remove the given key from the tracking key set.\r\n    *\r\n    * @param {string}   key - Key to remove.\r\n    */\r\n   removeKey(key)\r\n   {\r\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\r\n\r\n      if (this.#keySet.has(key))\r\n      {\r\n         this.#keySet.delete(key);\r\n\r\n         if (this.#keyMap.has(key))\r\n         {\r\n            this.#keyMap.delete(key);\r\n            this._updateSubscribers();\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Update options.\r\n    *\r\n    * @param {KeyStoreOptions}   options - Options to set.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (typeof options?.preventDefault === 'boolean') { this.#options.preventDefault = options.preventDefault; }\r\n      if (typeof options?.useCode === 'boolean') { this.#options.useCode = options.useCode; }\r\n      if (typeof options?.stopPropagation === 'boolean') { this.#options.stopPropagation = options.stopPropagation; }\r\n   }\r\n\r\n   /**\r\n    * @param {string}   key - key or key code to lookup.\r\n    *\r\n    * @returns {number} 1 if currently pressed and 0 if not pressed.\r\n    */\r\n   value(key)\r\n   {\r\n      return this.#keyMap.has(key) ? 1 : 0;\r\n   }\r\n\r\n   // Store subscriber implementation --------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @param {function(KeyStore): void} handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns {(function(): void)} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this);                     // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers.\r\n    *\r\n    * @protected\r\n    */\r\n   _updateSubscribers()\r\n   {\r\n      for (let cntr = 0; cntr < this.#subscriptions.length; cntr++) { this.#subscriptions[cntr](this); }\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {object} KeyStoreOptions\r\n *\r\n * @property {boolean}  [preventDefault=true] - Invoke `preventDefault` on key events.\r\n *\r\n * @property {boolean}  [useCode=true] - When true use `event.code` otherwise use `event.key` to get active key.\r\n *\r\n * @property {boolean}  [stopPropagation=true] - Invoke `stopPropagation` on key events.\r\n */\n\n/**\r\n * Provides an action to forward on key down & up events. This can be any object that has associated `keydown` and\r\n * `keyup` methods. See {@link KeyStore} for a store implementation.\r\n *\r\n * @param {HTMLElement} node - Target element.\r\n *\r\n * @param {import('..').KeyStore}   keyStore - KeyStore to forward events key down / up events to...\r\n *\r\n * @returns {{update: (function(import('..').KeyStore): void), destroy: Function}} Action lifecycle methods.\r\n */\r\nfunction keyforward(node, keyStore)\r\n{\r\n   if (typeof keyStore?.keydown !== 'function' || typeof keyStore.keyup !== 'function')\r\n   {\r\n      throw new TypeError(`'keyStore' doesn't have required 'keydown' or 'keyup' methods.`);\r\n   }\r\n\r\n   /**\r\n    * @param {KeyboardEvent} event -\r\n    */\r\n   function onKeydown(event)\r\n   {\r\n      keyStore.keydown(event);\r\n   }\r\n\r\n   /**\r\n    * @param {KeyboardEvent} event -\r\n    */\r\n   function onKeyup(event)\r\n   {\r\n      keyStore.keyup(event);\r\n   }\r\n\r\n   /**\r\n    * Activates key listeners.\r\n    */\r\n   function activateListeners()\r\n   {\r\n      node.addEventListener('keydown', onKeydown);\r\n      node.addEventListener('keyup', onKeyup);\r\n   }\r\n\r\n   /**\r\n    * Removes key listeners.\r\n    */\r\n   function removeListeners()\r\n   {\r\n      node.removeEventListener('keydown', onKeydown);\r\n      node.removeEventListener('keyup', onKeyup);\r\n   }\r\n\r\n   activateListeners();\r\n\r\n   return {\r\n      update: (newKeyStore) =>  // eslint-disable-line no-shadow\r\n      {\r\n         keyStore = newKeyStore;\r\n\r\n         if (typeof keyStore?.keydown !== 'function' || typeof keyStore.keyup !== 'function')\r\n         {\r\n            throw new TypeError(`'newKeyStore' doesn't have required 'keydown' or 'keyup' methods.`);\r\n         }\r\n      },\r\n\r\n      destroy: () => removeListeners()\r\n   };\r\n}\n\nexport { KeyStore, keyforward };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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"}